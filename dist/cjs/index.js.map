{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/contexts/EzOnRails/Provider.tsx", "../../src/contexts/EzOnRails/Context.ts", "../../src/components/RegistrationForm/RegistrationForm.tsx", "../../src/hooks/useEzApi.ts", "../../src/hooks/useEzApiHttpClient.ts", "../../src/http/utils/EzOnRailsUtils.ts", "../../src/http/client/EzOnRailsHttpError.ts", "../../src/http/client/EzOnRailsHttpClient.ts", "../../src/hooks/useEzOnRails.ts", "../../src/hooks/useEzScaff.ts", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-WVyVQDwzVJS7/ez-on-rails-react/src/components/shared/styles/Form.module.css.js", "../../src/components/LoginForm/LoginForm.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-TFaGnOII7l1i/ez-on-rails-react/src/components/shared/styles/Form.module.css.js", "../../src/components/LostPasswordForm/LostPasswordForm.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-pB7JLHC8grSk/ez-on-rails-react/src/components/shared/styles/Form.module.css.js", "../../src/components/ResendConfirmationForm/ResendConfirmationForm.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-ooFxajcal8iZ/ez-on-rails-react/src/components/shared/styles/Form.module.css.js", "../../src/components/DevelopmentHint/DevelopmentHint.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-5xeRkGAtqef8/ez-on-rails-react/src/components/DevelopmentHint/DevelopmentHint.module.css.js", "../../src/components/ActiveStorageDropzone/ActiveStorageDropzone.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-NOR40sZ51jgU/ez-on-rails-react/src/components/ActiveStorageDropzone/ActiveStorageDropzone.module.css.js", "../../src/components/ResetPasswordForm/ResetPasswordForm.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-CYBiYeFuVSN9/ez-on-rails-react/src/components/shared/styles/Form.module.css.js", "../../src/components/ProtectedPage/ProtectedPage.tsx", "../../src/components/UpdateUserForm/UpdateUserForm.tsx", "esbuild-css-modules-plugin-namespace:/var/folders/23/m0mk1wy93cjfgzfgrjp59gy00000gn/T/tmp-40754-lbroovjlkZZC/ez-on-rails-react/src/components/shared/styles/Form.module.css.js", "../../src/http/swr/EzOnRailsSwr.ts", "../../src/http/index.ts", "../../src/integrations/remawy/EzOnRailsReMaWyUploader.ts", "../../src/integrations/remawy/EzOnRailsReMaWy.ts", "../../src/integrations/index.ts"],
  "sourcesContent": ["// contexts\nexport * from './contexts';\n\n// components\nexport * from './components';\n\n// hooks\nexport * from './hooks';\n\n// http\nexport * from './http';\n\n// integrations\nexport * from './integrations';\n", "import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { EzOnRailsAuthInfo } from '../../http/client/EzOnRailsHttpClient';\nimport { EzOnRailsContext, EzOnRailsContextValue } from './Context';\nimport { OnUnauthorizedCallback } from '../../hooks/useEzApiHttpClient';\n\n/**\n * Props for the EzOnRailsContextProvider.\n */\ninterface EzOnRailsProps {\n    // The current api version of the ez-on-rails backend, used by the http requests to the backend\n    apiVersion: string;\n\n    // The base url of the backend (without /api), used by the http requests to the backend\n    backendUrl: string;\n\n    // Initial auth info for the current user, can be set if the login values were saved somewhere\n    authInfo?: EzOnRailsAuthInfo;\n\n    // The children that can access the context value\n    children: ReactNode;\n\n    // Called if any request using ez-on-rails results in a http 401 status code\n    onUnauthorizedCallback?: () => void;\n}\n\n/**\n * Context provider for the CustomStyle value.\n */\nexport const EzOnRails = (props: EzOnRailsProps) => {\n    const [backendUrl, setBackendUrl] = useState<string>(props.backendUrl);\n    const [authInfo, setAuthInfo] = useState<EzOnRailsAuthInfo | null>(props.authInfo || null);\n    const [apiVersion, setApiVersion] = useState<string>(props.apiVersion);\n    const [onUnauthorizedCallback, setOnUnauthorizedCallback] = useState<OnUnauthorizedCallback | undefined>(\n        () => props.onUnauthorizedCallback\n    );\n\n    /**\n     * Saves the newCallback to the state.\n     * This wrapper is needed because if we would pass the callback to the setOnUnauthorizedCallback function directly, react thinks\n     * this is a state update function and executes it immediatly. Hence we pass a function that returns that function.\n     *\n     * @param newCallback\n     */\n    const setOnUnauthorizedCallbackWrapper = useCallback((newCallback: OnUnauthorizedCallback | undefined) => {\n        setOnUnauthorizedCallback(() => newCallback);\n    }, []);\n\n    /**\n     * Called if some value for the context changes.\n     * Removes ending slash from backendUrl if it was given.\n     * Returns the value for the context.\n     */\n    const value: EzOnRailsContextValue = useMemo(() => {\n        const result = {\n            backendUrl: backendUrl,\n            authInfo: authInfo || null,\n            apiVersion: apiVersion,\n            setBackendUrl: setBackendUrl,\n            setAuthInfo: setAuthInfo,\n            setApiVersion: setApiVersion,\n            setOnUnauthorizedCallback: setOnUnauthorizedCallbackWrapper,\n            onUnauthorizedCallback: onUnauthorizedCallback\n        };\n\n        if (result.backendUrl.endsWith('/')) {\n            result.backendUrl = result.backendUrl.slice(0, -1);\n        }\n\n        return result;\n    }, [backendUrl, authInfo, apiVersion, setOnUnauthorizedCallbackWrapper]);\n\n    return <EzOnRailsContext.Provider value={value}>{props.children}</EzOnRailsContext.Provider>;\n};\n", "import { createContext } from 'react';\nimport { EzOnRailsAuthInfo } from '../../http/client/EzOnRailsHttpClient';\nimport {OnUnauthorizedCallback} from \"../../hooks/useEzApiHttpClient\";\n\n/**\n * The EzOnRails context values needed by the package.\n */\nexport interface EzOnRailsContextValue {\n    // The base url of the backend (without /api), used by the http requests to the backend\n    backendUrl: string;\n\n    // The auth info for the http requests, if the user is signed in\n    authInfo: EzOnRailsAuthInfo | null;\n\n    // The current api version of the ez-on-rails backend, used by the http requests to the backend\n    apiVersion: string;\n\n    // Setter for the backendUrl\n    setBackendUrl: (backendUrl: string) => void;\n\n    // Setter for the authInfo\n    setAuthInfo: (authInfo: EzOnRailsAuthInfo | null) => void;\n\n    // Setter for the api version\n    setApiVersion: (apiVersion: string) => void;\n\n    // Called if any http request results in a 401 http status code\n    onUnauthorizedCallback?: OnUnauthorizedCallback;\n\n    // Setter to save the callback that is called if some request resulted in a 401 http status\n    setOnUnauthorizedCallback: (callback: OnUnauthorizedCallback | undefined) => void;\n}\n\nexport const EzOnRailsContext = createContext<EzOnRailsContextValue>({\n    apiVersion: '1.0',\n    backendUrl: 'http://localhost:3000',\n    authInfo: null,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n    setBackendUrl: (backendUrl: string) => {},\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n    setAuthInfo: (authInfo: EzOnRailsAuthInfo | null) => {},\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n    setApiVersion: (apiVersion: string) => {},\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n    setOnUnauthorizedCallback: (callback: OnUnauthorizedCallback | undefined) => {}\n});\n", "import React, { ReactNode, useState } from 'react';\nimport * as Yup from 'yup';\nimport { SchemaOf } from 'yup';\nimport { Formik } from 'formik';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsHttpClient, EzOnRailsSignUpParams } from '../../http/client/EzOnRailsHttpClient';\nimport { Button, Form } from 'react-bootstrap';\nimport { DefaultFormProps } from '../shared/types/Form';\nimport formStyles from '../shared/styles/Form.module.css';\n\n/**\n * Props for the RegistrationForm.\n * Used to customize the register form.\n */\nexport interface RegistrationFormProps extends DefaultFormProps {\n    // The error text if the user types a too short username\n    usernameToShortErrorText?: string;\n\n    // The error text if the user types a too long username\n    usernameToLongErrorText?: string;\n\n    // The error text if the user does not provide a username\n    usernameRequiredErrorText?: string;\n\n    // The error text if the user types an invalid email\n    emailInvalidErrorText?: string;\n\n    // The error text if the user does not provide an email\n    emailRequiredErrorText?: string;\n\n    // The error text if the user types a too long email\n    emailToLongErrorText?: string;\n\n    // The error text if the user types a to short password\n    passwordToShortErrorText?: string;\n\n    // the error text if the user does not provide a password\n    passwordRequiredErrorText?: string;\n\n    // The error text if the password does not match the password confirmation\n    passwordsMustMatchErrorText?: string;\n\n    // The error text if the user did not accept the privacy policy\n    privacyPolicyNotAcceptedErrorText?: string;\n\n    // label for the Username field\n    labelUsername?: string;\n\n    // label for the Email field\n    labelEmail?: string;\n\n    // label for the Password field\n    labelPassword?: string;\n\n    // label for the PasswordConfirmation field\n    labelPasswordConfirmation?: string;\n\n    // label for the PrivacyPolicyAccedpted field\n    labelPrivacyPolicyAccepted?: string | ReactNode;\n\n    // The minimum length of the password\n    minPasswordLength?: number;\n\n    // The minimum length of the username\n    minUsernameLength?: number;\n\n    // The maximum length of the username\n    maxUsernameLength?: number;\n\n    // The maximum length of the email\n    maxEmailLength?: number;\n\n    // Called if the user successfully registered in. The email of the user will be passed.\n    onRegisterSuccess: (email: string) => void;\n\n    // Called if the user registration failed. The passed error is the exception.\n    onRegisterError: (e: unknown) => void;\n\n    // URL targeting the privacy policy\n    privacyPolicyUrl?: string;\n\n    // URL targeting the general terms and conditions\n    generalTermsUrl?: string;\n}\n\n/**\n * RegistrationForm component for a default Registration form using EzOnRails.\n * Customizable with the props using css.\n *\n * @param props\n * @constructor\n */\nexport const RegistrationForm = (props: RegistrationFormProps) => {\n    const { backendUrl, apiVersion } = useEzOnRails();\n    const [inProgress, setInProgress] = useState<boolean>(false);\n\n    /**\n     * Signs up the user given by the form values.\n     * Calls the callback for a successfull registration in the props, if the request was successfull.\n     * In this case the email of the registered user will be passed as parameter.\n     * Calls the callback for some error in the props, if the request was not successfull.\n     * In this case the error thrown by the request will be passed as parameter.\n     *\n     * @param values\n     */\n    const register = async (values: EzOnRailsSignUpParams) => {\n        setInProgress(true);\n\n        try {\n            await EzOnRailsHttpClient.signUp(backendUrl, values, apiVersion);\n            props.onRegisterSuccess(values.email);\n            setInProgress(false);\n        } catch (e: unknown) {\n            props.onRegisterError(e);\n            setInProgress(false);\n        }\n    };\n\n    /**\n     * Validation Schema for registration values.\n     */\n    const RegistrationValidationSchema: SchemaOf<EzOnRailsSignUpParams> = Yup.object()\n        .shape({\n            username: Yup.string()\n                .min(\n                    props.minUsernameLength || 5,\n                    props.usernameToShortErrorText ||\n                        `The username is too short. It must have at least ${props.minUsernameLength || 5} characters.`\n                )\n                .max(\n                    props.maxUsernameLength || 50,\n                    props.usernameToLongErrorText ||\n                        `The username is too long. It must not have more than ${\n                            props.maxUsernameLength || 50\n                        } characters.`\n                )\n                .required(props.usernameRequiredErrorText || 'An username is required.'),\n            email: Yup.string()\n                .email(props.emailInvalidErrorText || 'Invalid email address.')\n                .required(props.emailRequiredErrorText || 'An email address is required.')\n                .max(\n                    props.maxEmailLength || 100,\n                    props.emailToLongErrorText ||\n                        `The email address is too long. It must have not more than ${\n                            props.maxEmailLength || 100\n                        } characters.`\n                ),\n            password: Yup.string()\n                .min(\n                    props.minPasswordLength || 8,\n                    props.passwordToShortErrorText ||\n                        `The password is too short. It must have at least ${props.minPasswordLength || 8} characters.`\n                )\n                .required(props.passwordRequiredErrorText || 'A password is required.'),\n            passwordConfirmation: Yup.string().oneOf(\n                [Yup.ref('password')],\n                props.passwordsMustMatchErrorText || 'The password and its confirmation must match.'\n            ),\n            privacyPolicyAccepted: Yup.boolean().isTrue(\n                props.privacyPolicyNotAcceptedErrorText || 'The privacy policy must be accepted.'\n            )\n        })\n        .defined();\n\n    // initial values of the formular\n    const initialFormValues: EzOnRailsSignUpParams = {\n        username: '',\n        email: '',\n        password: '',\n        passwordConfirmation: '',\n        privacyPolicyAccepted: false\n    };\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            validationSchema={RegistrationValidationSchema}\n            onSubmit={(values) => {\n                register(values);\n            }}\n        >\n            {({ errors, handleChange, handleSubmit }) => (\n                <form onSubmit={handleSubmit} className={props.containerClassName || formStyles.container}>\n                    <Form.Group\n                        id=\"username-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelUsername || 'Username'}\n                        </Form.Label>\n                        <Form.Control\n                            id=\"username\"\n                            className={props.fieldInputClassName || formStyles.formField}\n                            type=\"text\"\n                            onChange={handleChange}\n                            isInvalid={!!errors.username}\n                        />\n                        <Form.Control.Feedback\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                            type=\"invalid\"\n                        >\n                            {errors.username}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group\n                        id=\"email-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelEmail || 'Email address'}\n                        </Form.Label>\n                        <Form.Control\n                            id=\"email\"\n                            className={props.fieldInputClassName || formStyles.formField}\n                            type=\"email\"\n                            onChange={handleChange}\n                            isInvalid={!!errors.email}\n                        />\n                        <Form.Control.Feedback\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                            type=\"invalid\"\n                        >\n                            {errors.email}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group\n                        id=\"password-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelPassword || 'Password'}\n                        </Form.Label>\n                        <Form.Control\n                            id=\"password\"\n                            className={props.fieldInputClassName || formStyles.formField}\n                            type=\"password\"\n                            onChange={handleChange}\n                            isInvalid={!!errors.password}\n                        />\n                        <Form.Control.Feedback\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                            type=\"invalid\"\n                        >\n                            {errors.password}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group\n                        id=\"password-confirmation-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelPasswordConfirmation || 'Password confirmation'}\n                        </Form.Label>\n                        <Form.Control\n                            id=\"passwordConfirmation\"\n                            className={props.fieldInputClassName || formStyles.formField}\n                            type=\"password\"\n                            onChange={handleChange}\n                            isInvalid={!!errors.passwordConfirmation}\n                        />\n                        <Form.Control.Feedback\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                            type=\"invalid\"\n                        >\n                            {errors.passwordConfirmation}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group\n                        id=\"privacy-policy-accepted-container\"\n                        className={props.fieldCheckboxContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Check\n                            id=\"privacyPolicyAccepted\"\n                            className={props.fieldCheckboxInputClassName || formStyles.formField}\n                            type=\"checkbox\"\n                            label={\n                                props.labelPrivacyPolicyAccepted || (\n                                    <span>\n                                        I have read and accept the{' '}\n                                        <a href={props.privacyPolicyUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            privacy policy\n                                        </a>{' '}\n                                        and{' '}\n                                        <a href={props.generalTermsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            terms and conditions\n                                        </a>{' '}\n                                        .\n                                    </span>\n                                )\n                            }\n                            onChange={handleChange}\n                            isInvalid={!!errors.privacyPolicyAccepted}\n                            feedbackType=\"invalid\"\n                            feedback={errors.privacyPolicyAccepted}\n                        />\n                    </Form.Group>\n                    {!inProgress && (\n                        <div className={props.submitButtonContainerClassName || 'ez-on-rails-form-submit-container'}>\n                            <Button\n                                className={props.submitButtonClassName || formStyles.submitButton}\n                                type=\"submit\"\n                                variant=\"primary\"\n                            >\n                                {props.labelSubmitButton || 'Register'}\n                            </Button>\n                        </div>\n                    )}\n                </form>\n            )}\n        </Formik>\n    );\n};\n", "import { useCallback, useEffect, useRef, useState } from 'react';\nimport { HttpMethod } from './types';\nimport { useEzApiHttpClient } from './useEzApiHttpClient';\nimport { useEzOnRails } from './useEzOnRails';\n\n/**\n * Describes the result of an api requests using the useEzApi hook.\n */\ninterface UseEzApiResult<TRequest, TResponse> {\n    // The response data, if available. Null if the response was not finished yet, or got an error.\n    data: TResponse | null;\n\n    // Not null, if an error occured during request\n    error: unknown | null;\n\n    // Indictaes whether the request is currently in progress\n    inProgress: boolean;\n\n    // Calls the defined request manually\n    callApi: (params?: TRequest) => Promise<TResponse | undefined>;\n}\n\n/**\n * Hook that calls a http request to the backendUrl that is defined in the EzOnRails context provider,\n * using the authInfo that is also defined in the context provider.\n * The path is expected to be the relative path without the api/ prefix. The prefix will be appended automatically.\n * The result will be returned via the hooks data return value.\n * If the options skipInitialCall value is set to true, the api request will not be called initially after the hook is called.\n * In this case you can call the request by the returned callApi function manually.\n *\n * @param path\n * @param method\n * @param data\n * @param options\n */\nexport const useEzApi = <TRequest, TResponse>(\n    path: string,\n    method: HttpMethod = 'GET',\n    data?: TRequest,\n    options?: {\n        skipInitialCall?: boolean;\n    }\n): UseEzApiResult<TRequest, TResponse> => {\n    const { backendUrl, authInfo, apiVersion } = useEzOnRails();\n    const [response, setResponse] = useState<TResponse | null>(null);\n    const [error, setError] = useState<unknown | null>(null);\n    const [inProgress, setInProgress] = useState<boolean>(false);\n    const { call } = useEzApiHttpClient();\n\n    /**\n     * Calls the api path at the EzOnRails application defined by the backendUrl and passes the specified data.\n     * Updates the states to make the hook like behavior work and returns the value for manually calls.\n     * If params is not given, the data given by the props will be passed.\n     */\n    const callApi = useCallback(async (params?: TRequest) => {\n        try {\n            setInProgress(true);\n            setError(null);\n            setResponse(null);\n\n            const result: TResponse = await call<TRequest, TResponse>(path, method, params || data);\n\n            setResponse(result);\n            setInProgress(false);\n\n            return result;\n        } catch (error: unknown) {\n            setError(error);\n            setInProgress(false);\n        }\n    }, [path]);\n\n    /**\n     * Called initial and if something relevant for the request in the context changes.\n     * Starts the http request.\n     */\n    useEffect(() => {\n        (async () => {\n            if (options?.skipInitialCall) return;\n\n            await callApi();\n        })();\n    }, [authInfo, backendUrl, apiVersion, path]);\n\n    return {\n        data: response,\n        error: error,\n        inProgress: inProgress,\n        callApi: callApi\n    };\n};\n", "import { useCallback } from 'react';\nimport { EzOnRailsHttpClient } from '../http/client/EzOnRailsHttpClient';\nimport { EzOnRailsHttpUtils } from '../http/utils/EzOnRailsUtils';\nimport { HttpMethod } from './types';\nimport { useEzOnRails } from './useEzOnRails';\nimport {EzOnRailsHttpError} from \"../http\";\n\n/**\n * Type for an unauthorized callback.\n */\nexport type OnUnauthorizedCallback = () => void;\n\n/**\n * Describes the result of the UseEzApiClient hook.\n */\ninterface UseEzApiHttpClientResult {\n    // The method to call any http request against the EzOnRails backend application\n    call: <TRequest, TResponse>(path: string, method: HttpMethod, params?: TRequest) => Promise<TResponse>;\n}\n\n/**\n * Hook that calls returns a method to call an api request to an EzOnRails application.\n * The request path and method is specified via the method.\n * The method automaticly uses the authInfo, backendUrl and apiVersion from the context, hence nothing else must be provided.\n * If basePath is given, it will be prepended to the path.\n * The api Prefix must not be given in the path of the method or the basePath. It will be automaticly appended.\n * The provided params are automaticly converted from camelCase to snakeCase. Date objects are automaticly converted to strings.\n * The response will be automaticly converted from snakeCase to camelCase. Date strings are automaticly converted to date objects.\n *\n * @param basePath\n */\nexport const useEzApiHttpClient = (basePath?: string): UseEzApiHttpClientResult => {\n    const { backendUrl, authInfo, apiVersion, onUnauthorizedCallback } = useEzOnRails();\n\n    /**\n     * Calls a request to api of the EzOnRails backend application defined by the context values.\n     * The /api prefix must not be given to the path, it will be appended automaticly.\n     * The params and response is automaticly converted, hence no management for casing or dates is necessary.\n     * If a basePath is passed by the hook, it will be prepended to the path.\n     */\n    const call = useCallback(\n        async <TRequest, TResponse>(path: string, method: HttpMethod, params?: TRequest): Promise<TResponse> => {\n            const cleanedBasePath = basePath\n                ? EzOnRailsHttpUtils.cleanupPath(EzOnRailsHttpUtils.cleanupUrl(basePath))\n                : null;\n            const cleanedPath = EzOnRailsHttpUtils.cleanupPath(path);\n            const fullPath = `${cleanedBasePath ? cleanedBasePath + '/' : ''}${cleanedPath}`;\n\n            try {\n                switch (method) {\n                    case 'POST':\n                        return EzOnRailsHttpClient.post<TRequest | undefined, TResponse>(\n                            backendUrl,\n                            fullPath,\n                            params,\n                            authInfo,\n                            apiVersion\n                        );\n                    case 'PUT':\n                        return EzOnRailsHttpClient.put<TRequest | undefined, TResponse>(\n                            backendUrl,\n                            fullPath,\n                            params,\n                            authInfo,\n                            apiVersion\n                        );\n                    case 'PATCH':\n                        return EzOnRailsHttpClient.patch<TRequest | undefined, TResponse>(\n                            backendUrl,\n                            fullPath,\n                            params,\n                            authInfo,\n                            apiVersion\n                        );\n                    case 'DELETE':\n                        return EzOnRailsHttpClient.delete<TRequest | undefined, TResponse>(\n                            backendUrl,\n                            fullPath,\n                            params,\n                            authInfo,\n                            apiVersion\n                        );\n                    default:\n                        return EzOnRailsHttpClient.get<TRequest | undefined, TResponse>(\n                            backendUrl,\n                            fullPath,\n                            params,\n                            authInfo,\n                            apiVersion\n                        );\n                }\n            } catch (err: unknown) {\n                // If the error is a http status 401 error and the onUnauthorized callback is available, call it\n                if (!EzOnRailsHttpUtils.isEzOnRailsHttpError(err) || (err as EzOnRailsHttpError).httpStatusCode !== 401 || !onUnauthorizedCallback) throw err;\n\n                onUnauthorizedCallback();\n\n                throw err;\n            }\n        },\n        [authInfo, apiVersion, backendUrl, basePath, onUnauthorizedCallback]\n    );\n\n    return { call: call };\n};\n", "import { toCamel, toSnake } from 'convert-keys';\n\n/**\n * Removes slash from path begin if exists.\n *\n * @param path\n */\nconst cleanupPath = (path: string) => {\n    if (path.startsWith('/')) {\n        return path.slice(1);\n    }\n\n    return path;\n};\n\n/**\n * Removes trailing slash from url if exists.\n *\n * @param url\n */\nconst cleanupUrl = (url: string) => {\n    if (url.endsWith('/')) {\n        return url.slice(0, -1);\n    }\n\n    return url;\n};\n\n/**\n * Returns the full url to the backend having the relative path of an EzOnRails application at the specified backendUrl.\n *\n * @param backendUrl\n * @param path\n */\nconst toBaseUrl = (backendUrl: string, path: string): string => {\n    return `${cleanupUrl(backendUrl)}/${cleanupPath(path)}`;\n};\n\n/**\n * Returns the full url to the backend api of an EzOnRails application at the backendUrl having the relative path.\n * The backendUrl is expected not to have the api suffix.\n * The path is expected not to have the api prefix.\n *\n * @param backendUrl\n * @param path\n */\nconst toApiUrl = (backendUrl: string, path: string): string => {\n    return `${cleanupUrl(backendUrl)}/api/${cleanupPath(path)}`;\n};\n\n/**\n * Converts the single string into snake case.\n * If the string contains :: it will be converted to slash, related to the rails conventions for namespaces and paths.\n *\n * @param str\n */\nconst toSnakeCasePath = (str: string) => {\n    // convert A-Z to a-z_ except for the first letter, the first letter is only converted to lowercase\n    str = str.replace(/[A-Z]/g, (match, index) => (index === 0 ? match.toLowerCase() : '_' + match.toLowerCase()));\n\n    // special cases for namespaces\n    str = str.replace(/::_/g, '/');\n    str = str.replace(/\\/_/g, '/');\n\n    return str;\n};\n\n/**\n * Converts the object or array into snake_case.\n */\nconst toSnakeCase = <T>(data: T): T => {\n    // Data is not interpretable\n    if (!data) return data;\n\n    return toSnake(data);\n};\n\n/**\n * Converts the object or array to camelCase.\n *\n * @param data\n */\nconst toCamelCase = <T>(data: T): T => {\n    // Data is not interpretable\n    if (!data) return data;\n\n    return toCamel(data);\n};\n\n/**\n * Converts the given parameters object to a get Parameter string.\n */\nconst toGetParameters = (parameters: Record<string, string | number | boolean | null>) => {\n    return Object.keys(parameters)\n        .map((key) => key + '=' + parameters[key])\n        .join('&');\n};\n\n/**\n * Searches for occurrences of strings having dates and date-times, converts them to date objects and returns the result.\n * This is done recursively, hence every nested objects or arrays are looked up.\n *\n * @param params\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst toDates = (params: any): any => {\n    if (typeof params === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(params)) {\n        return new Date(params);\n    }\n\n    if (Array.isArray(params)) {\n        return params.map((param) => toDates(param));\n    }\n\n    if (params !== null && typeof params === 'object') {\n        Object.keys(params).forEach((key) => {\n            params[key] = toDates(params[key]);\n        });\n    }\n\n    return params;\n};\n\n/**\n * Searches for occurrences of dates, converts them to strings and returns the result.\n * This is done recursively, hence every nested objects or arrays are looked up.\n *\n * @param params\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst toDateStrings = (params: any): any => {\n    if (params instanceof Date) {\n        return params.toISOString();\n    }\n\n    if (Array.isArray(params)) {\n        return params.map((param) => toDateStrings(param));\n    }\n\n    // the !== null is needed here, because typeof returns 'object' for null, this is because\n    // javascript is just HUEHUEHUEHUEHUEHUEHUEHUEHUEHUEHUEHUEHUE\n    if (params !== null && typeof params === 'object') {\n        Object.keys(params).forEach((key) => {\n            params[key] = toDateStrings(params[key]);\n        });\n    }\n\n    return params;\n};\n\n/**\n * Prepares the specified params for a request to the backend.\n * Recursively transforms the keys to underscore and the dates to iso strings.\n *\n * @param params\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst toBackendParams = (params: any) => {\n    return toDateStrings(toSnakeCase(params));\n};\n\n/**\n * Prepares the speciied params for the usage in the frontend.\n * Recursively transforms the keys to camelCase and the date iso strings to date objects.\n *\n * @param params\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst toFrontendParams = (params: any) => {\n    // undefined, null, ...\n    if (!params) return params;\n\n    // no object or array\n    if (typeof params !== 'object') return params;\n\n    return toDates(toCamelCase(params));\n};\n\n/**\n * Returns true if the specified error object is an http error having a status code.\n *\n * @param err\n */\nconst isEzOnRailsHttpError = (err: unknown): boolean => {\n    if (!err) return false;\n\n    if (typeof err === 'object' && (err as any)['httpStatusCode']) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Contains utils for http access of some EzOnRails Backend.\n */\nexport const EzOnRailsHttpUtils = {\n    cleanupUrl: cleanupUrl,\n    cleanupPath: cleanupPath,\n    toBaseUrl: toBaseUrl,\n    toApiUrl: toApiUrl,\n    toSnakeCase: toSnakeCase,\n    toSnakeCasePath: toSnakeCasePath,\n    toCamelCase: toCamelCase,\n    toGetParameters: toGetParameters,\n    toDates: toDates,\n    toDateStrings: toDateStrings,\n    toBackendParams: toBackendParams,\n    toFrontendParams: toFrontendParams,\n    isEzOnRailsHttpError: isEzOnRailsHttpError\n};\n", "/**\n * Error class for requesting actions via the EzOnRailsHttpClient.\n * Holds an httpStatusCode and message field that is accessible from outside.\n */\nexport class EzOnRailsHttpError extends Error {\n    public httpStatusCode: number;\n\n    /**\n     * Constructor expects th httpStatusCode given by the response of the request and a message.\n     *\n     * @param message\n     * @param httpStatusCode\n     */\n    constructor(message: string, httpStatusCode: number) {\n        super();\n\n        this.message = message;\n        this.httpStatusCode = httpStatusCode;\n    }\n}\n", "import { EzOnRailsHttpUtils } from '../utils/EzOnRailsUtils';\nimport { RailsFileBlob } from '../../components/ActiveStorageDropzone/ActiveStorageDropzone';\nimport { EzOnRailsHttpError } from './EzOnRailsHttpError';\n\n/**\n * Describes the header information needed to authenticate as user on an EzOnRails application.\n */\ninterface EzOnRailsAuthHeader {\n    uid: string;\n    client: string;\n    expiry: string;\n    'token-type': string;\n    'access-token': string;\n}\n\n/**\n * Auth information for http requests and responses.\n * If a route is protected and needs authentication, this information must be passed to the http\n * client to authenticate againsgt the EzOnRails endpoint. If the server changes the authentication\n * information, those will be send back to the client. The resulting new auth information will\n * be returned by the http client, in addition to the normal result.\n */\nexport interface EzOnRailsAuthInfo {\n    uid: string;\n    client: string;\n    expiry: string;\n    tokenType: string;\n    accessToken: string;\n}\n\n/**\n * Type for a user registered in an ez-on-rails system.\n * Used by the actions to get and update the own user.\n */\nexport interface EzOnRailsUser {\n    // The email of the user\n    email: string;\n\n    // An unconfirmed email, if the user has not yet confirmed his email\n    unconfirmedEmail?: string;\n\n    // The optional username of the user\n    username?: string;\n\n    // The users avatar as blob, holding the url and signedId and filename\n    avatar?: RailsFileBlob | null;\n}\n\n/**\n * Type for a updating an registered in an ez-on-rails system.\n * Used by the actions to get and update the own user.\n * The unconfirmedEmail is not needed to be submitted, since this is only used to show the user if he\n * has provided any unconfirmed email yet.\n */\nexport type EzOnRailsUpdateUserParams = Partial<Omit<EzOnRailsUser, 'unconfirmedEmail'>> & {\n    // The  new password, must only be passed if the user wants to change the password\n    password?: string;\n\n    // The confirmed new password, must match password, must only be passed if the user wants to change the password\n    passwordConfirmation?: string;\n};\n\n/**\n * Describes the parameters that are needed for signup.\n * The interface allows any data to be passed, but requires the parameters to be set that are minimum\n * needed by ez-on-rails for signUp. This makes it possible to append any data on the user model that is also saved\n * on signUp, but also gets sure that the needed data for registration process is passed.\n */\nexport interface EzOnRailsSignUpParams {\n    // The users email\n    email: string;\n\n    // The users password\n    password: string;\n\n    // The password confirmation, this must match the password\n    passwordConfirmation: string;\n\n    // Indicates whether the user accepted the privacy policy. Needs to be true to register.\n    privacyPolicyAccepted: boolean;\n\n    // The optional username, can be anything\n    username?: string;\n\n    // Any additional data if your model has additional data on registration\n    [key: string]: unknown;\n}\n\n/**\n * Descibes the parameters needed to sign in.\n */\nexport interface EzOnRailsSignInParams {\n    // The email of the user\n    email: string;\n\n    // The users password\n    password: string;\n}\n\n/**\n * Describes the parameters needed for the password reset instructions endpoint.\n */\nexport interface EzOnRailsPasswordResetInstructionsParams {\n    // The email the instructions are send to\n    email: string;\n}\n\n/**\n * Describes the parameters needed for the password reset endpoint.\n */\nexport interface EzOnRailsPasswordResetParams {\n    // The password the user wants to set\n    password: string;\n\n    // The password confirmation of the password, must match the password\n    passwordConfirmation: string;\n\n    // The token that was send via email to the user to reset the password\n    resetPasswordToken: string;\n}\n\n/**\n * Describes the parameters needed for the endpoint to resend the confirmation instructions.\n */\nexport interface EzOnRailsConfirmationInstructionsParams {\n    // The email the instructions are requested for\n    email: string;\n}\n\n/**\n * Describes the parameters needed to confirm an account using the confirmation link that was\n * send via email.\n */\nexport interface EzOnRailsConfirmParams {\n    // The token that was send to the users email\n    confirmationToken: string;\n}\n\n/**\n * Changes the specified authInfo object to an AuthHeader object, that can be passed via the\n * request to the server.\n * If undefined is passsed, the method will returned undefined, too.\n *\n * @param authInfo\n */\nconst authInfoToHeader = (authInfo: EzOnRailsAuthInfo | null): EzOnRailsAuthHeader | undefined => {\n    if (!authInfo) return undefined;\n\n    return {\n        uid: authInfo.uid,\n        client: authInfo.client,\n        expiry: authInfo.expiry,\n        'token-type': authInfo.tokenType,\n        'access-token': authInfo.accessToken\n    };\n};\n\n/**\n * Extracts the authentication information from the specified header and returns\n * a resulting EzOnRailsAuthInfo object. If no auth info are provided, undefined will be\n * returned.\n *\n * @param headers\n */\nconst getAuthInfoFromHeader = (headers: Record<string, string>): EzOnRailsAuthInfo => {\n    return {\n        uid: headers['uid'],\n        client: headers['client'],\n        expiry: headers['expiry'],\n        tokenType: headers['token-type'],\n        accessToken: headers['access-token']\n    };\n};\n\n/**\n * Returns the default http header needed for communication to some EzOnRails server instance.\n */\nexport const defaultHttpHeader = (authInfo: EzOnRailsAuthInfo | null, apiVersion: string) => {\n    return {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'api-version': apiVersion,\n        ...authInfoToHeader(authInfo)\n    };\n};\n\n/**\n * Describes the response object of the fetchWithThrow function.\n * TRes describes the type of the expected response body.\n */\ninterface FetchWithThrowResponse<TRes> {\n    // The response headers\n    headers: Record<string, string>;\n\n    // The response body\n    body: TRes;\n}\n\n/**\n * Uses the fetch api to execute a http request specified by the given http method, body and headers.\n * The difference between normal fetch and this method is, that an exception is thrown if the status\n * code is >= 400. The result of the request will be returned.\n * This method returns an object having the keys headers and body. Headers is the key value pair object\n * of header information from the response. Body is the json content, if given.\n *\n * @param method\n * @param url\n * @param body\n * @param headers\n */\nconst fetchWithThrow = async <TRes>(\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n    url: string,\n    body: unknown,\n    headers: Record<string, string>\n): Promise<FetchWithThrowResponse<TRes>> => {\n    const response = await fetch(url, {\n        method: method,\n        headers: headers,\n        body: body ? JSON.stringify(body) : null\n    });\n\n    // throw if something went wrong\n    if (response.status >= 400) {\n        throw new EzOnRailsHttpError(JSON.stringify(response.body), response.status);\n    }\n\n    // get header and data and return result\n    const responseHeaders: Record<string, string> = {};\n    let responseBody = null;\n    try {\n        // build headers\n        response.headers.forEach((value, key) => {\n            responseHeaders[key] = value;\n        });\n\n        // build body\n        responseBody = await response.json();\n    } catch (e) {}\n\n    return {\n        headers: responseHeaders,\n        body: responseBody\n    };\n};\n\n/**\n * Contains some Request related Methods to some EzOnRails api.\n * EzOnRails uses the localStorage to read and write the Configuration.\n * The Storage is expected to contain the followingValues.\n */\nexport const EzOnRailsHttpClient = {\n    /**\n     * Sends a signup request to the EzOnRails application at the specified backendUrl.\n     * The specified data is the user data passed to the sign_up action of the EzOnRails endpoint.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * Since this differs from service to service, the data is mentioned to be \"any\" data.\n     * This is a async function, hence returning a promise of the response of the action.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param apiVersion\n     */\n    signUp: async (backendUrl: string, data: EzOnRailsSignUpParams, apiVersion: string) => {\n        data = EzOnRailsHttpUtils.toBackendParams(data);\n\n        await fetchWithThrow(\n            'POST',\n            EzOnRailsHttpUtils.toBaseUrl(backendUrl, 'users'),\n            { user: data },\n            defaultHttpHeader(null, apiVersion)\n        );\n    },\n\n    /**\n     * Sends a sign in request to the EzOnRails application at the specified backendUrl.\n     * The user given by the specified data.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * The method returns an EzOnRailsAuthInfo object if the request was successfull and the server responded with authentication\n     * information for the next request. This information has to be saved and used by the next request to authenticate.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param apiVersion\n     */\n    signIn: async (backendUrl: string, data: EzOnRailsSignInParams, apiVersion: string): Promise<EzOnRailsAuthInfo> => {\n        data = EzOnRailsHttpUtils.toBackendParams(data);\n\n        const result = await fetchWithThrow(\n            'POST',\n            EzOnRailsHttpUtils.toApiUrl(backendUrl, 'auth/sign_in'),\n            data,\n            defaultHttpHeader(null, apiVersion)\n        );\n\n        return getAuthInfoFromHeader(result.headers);\n    },\n\n    /**\n     * Sends a signout request for the current user to the EzOnRails application at the specified backendUrl.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param authInfo\n     * @param apiVersion\n     */\n    signOut: async (backendUrl: string, authInfo: EzOnRailsAuthInfo, apiVersion: string) => {\n        await fetchWithThrow(\n            'DELETE',\n            EzOnRailsHttpUtils.toApiUrl(backendUrl, 'auth/sign_out'),\n            null,\n            defaultHttpHeader(authInfo, apiVersion)\n        );\n    },\n\n    /**\n     * Sends a request to send password reset instructions via email to the EzOnRails application at the specified backendUrl.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param apiVersion\n     */\n    passwordResetInstructions: async (\n        backendUrl: string,\n        data: EzOnRailsPasswordResetInstructionsParams,\n        apiVersion: string\n    ) => {\n        data = EzOnRailsHttpUtils.toBackendParams(data);\n\n        await fetchWithThrow(\n            'POST',\n            EzOnRailsHttpUtils.toBaseUrl(backendUrl, 'users/password'),\n            { user: data },\n            defaultHttpHeader(null, apiVersion)\n        );\n    },\n\n    /**\n     * Sends a request to reset the password to the EzOnRails application at the specified backendUrl.\n     * This is the request to change the password, after the user filled out the form with the new password.\n     * This method also clears all auth headers.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param apiVersion\n     */\n    passwordReset: async (backendUrl: string, data: EzOnRailsPasswordResetParams, apiVersion: string) => {\n        data = EzOnRailsHttpUtils.toBackendParams(data);\n\n        await fetchWithThrow(\n            'PUT',\n            EzOnRailsHttpUtils.toBaseUrl(backendUrl, 'users/password'),\n            { user: data },\n            defaultHttpHeader(null, apiVersion)\n        );\n    },\n\n    /**\n     * Requests and returns the own user information from the EzOnRails application at the specified backendUrl.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param authInfo\n     * @param apiVersion\n     */\n    getUser: async (backendUrl: string, authInfo: EzOnRailsAuthInfo, apiVersion: string): Promise<EzOnRailsUser> => {\n        const result = await fetchWithThrow<EzOnRailsUser>(\n            'GET',\n            EzOnRailsHttpUtils.toApiUrl(backendUrl, 'users/me'),\n            null,\n            defaultHttpHeader(authInfo, apiVersion)\n        );\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Updates the user with the specified data on the EzOnRails application at the specified backendUrl\n     * side and returns the updated profile.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param authInfo\n     * @param apiVersion\n     */\n    updateUser: async (\n        backendUrl: string,\n        data: EzOnRailsUpdateUserParams,\n        authInfo: EzOnRailsAuthInfo,\n        apiVersion: string\n    ): Promise<EzOnRailsUser> => {\n        // Only the signedId must be passed to the update action\n        const avatarSignedId = data.avatar?.signedId;\n        const submitData = { ...EzOnRailsHttpUtils.toBackendParams(data), avatar: avatarSignedId };\n\n        const result = await fetchWithThrow<EzOnRailsUser>(\n            'PATCH',\n            EzOnRailsHttpUtils.toApiUrl(backendUrl, 'users/me'),\n            { user: submitData },\n            defaultHttpHeader(authInfo, apiVersion)\n        );\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Sends a request to resend the confirmation email to the EzOnRails application at the specified backendUrl.\n     * This method also clears all auth headers.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param apiVersion\n     */\n    confirmationInstructions: async (\n        backendUrl: string,\n        data: EzOnRailsConfirmationInstructionsParams,\n        apiVersion: string\n    ) => {\n        data = EzOnRailsHttpUtils.toBackendParams(data);\n\n        await fetchWithThrow(\n            'POST',\n            EzOnRailsHttpUtils.toBaseUrl(backendUrl, 'users/confirmation'),\n            { user: data },\n            defaultHttpHeader(null, apiVersion)\n        );\n    },\n\n    /**\n     * Sends a request to confirm the account to the EzOnRails application at the specified backendUrl.\n     * The apiVersion is the current api version at the backend that must match.\n     *\n     * @param backendUrl\n     * @param data\n     * @param apiVersion\n     */\n    confirmation: async (backendUrl: string, data: EzOnRailsConfirmParams, apiVersion: string) => {\n        let url = EzOnRailsHttpUtils.toBaseUrl(backendUrl, 'users/confirmation');\n        data = EzOnRailsHttpUtils.toBackendParams(data);\n        // @ts-ignore This works because the type only is a default json object\n        url = `${url}?${EzOnRailsHttpUtils.toGetParameters(data)}`;\n\n        await fetchWithThrow('GET', url, null, defaultHttpHeader(null, apiVersion));\n    },\n\n    /**\n     * Calls a http GET action to the api at the specified path of an EzOnRails application at the backendUrl.\n     * The backendUrl and the path are expected not to have the api suffix / prefix included.\n     * The data object is expected to be an json object containing the body information of the request.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * In this case, the data object will be serialized to a get parameter string and will be appended to the url.\n     * The call includes the auth headers for the current user.\n     * If the authInfo is passed, the request will send authentication headers to authenticate the user defined by\n     * the authInfo object.\n     * The apiVersion is the current api version of the backend.\n     * If the beforeRequest function is passed, those will be called after the data has been converted to snake_case and\n     * before the data is send to the server. This can be used to manipulate the data right before the request.\n     * The response json will be automatically converted to camelCase. ISO Date Strings will be automatically converted to date objects.\n     *\n     * @param backendUrl\n     * @param path\n     * @param data\n     * @param authInfo\n     * @param apiVersion\n     * @param beforeRequest\n     */\n    get: async <TParams, TResponse>(\n        backendUrl: string,\n        path: string,\n        data: TParams,\n        authInfo: EzOnRailsAuthInfo | null = null,\n        apiVersion = '1.0',\n        beforeRequest: ((data: TParams) => TParams) | undefined = undefined\n    ): Promise<TResponse> => {\n        let url = EzOnRailsHttpUtils.toApiUrl(backendUrl, path);\n\n        if (data) {\n            data = EzOnRailsHttpUtils.toBackendParams(data);\n        }\n\n        if (beforeRequest) {\n            data = beforeRequest(data);\n        }\n\n        if (data) {\n            url = `${url}?${EzOnRailsHttpUtils.toGetParameters(data)}`;\n        }\n\n        const result = await fetchWithThrow<TResponse>('GET', url, null, defaultHttpHeader(authInfo, apiVersion));\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Calls a http POST action to the api at the specified path of an EzOnRails application at the backendUrl.\n     * The backendUrl and the path are expected not to have the api suffix / prefix included.\n     * The url is expected to be the path without the system and the api prefix.\n     * The data object is expected to be an json object containing the body information of the request.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * The call includes the auth headers for the current user.\n     * If the authInfo is passed, the request will send authentication headers to authenticate the user defined by\n     * the authInfo object.\n     * The apiVersion is the current api version of the backend.\n     * If the beforeRequest function is passed, those will be called after the data has been converted to snake_case and\n     * before the data is send to the server. This can be used to manipulate the data right before the request.\n     * The response json will be automatically converted to camelCase. ISO Date Strings will be automatically converted to date objects.\n     *\n     * @param backendUrl\n     * @param path\n     * @param data\n     * @param authInfo\n     * @param apiVersion\n     * @param beforeRequest\n     */\n    post: async <TParams, TResponse>(\n        backendUrl: string,\n        path: string,\n        data: TParams,\n        authInfo: EzOnRailsAuthInfo | null = null,\n        apiVersion = '1.0',\n        beforeRequest: ((data: TParams) => TParams) | undefined = undefined\n    ): Promise<TResponse> => {\n        const url = EzOnRailsHttpUtils.toApiUrl(backendUrl, path);\n\n        if (data) {\n            data = EzOnRailsHttpUtils.toBackendParams(data);\n        }\n\n        if (beforeRequest) {\n            data = beforeRequest(data);\n        }\n\n        const result = await fetchWithThrow<TResponse>('POST', url, data, defaultHttpHeader(authInfo, apiVersion));\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Calls a http PATCH action to the api at the specified path of an EzOnRails application at the backendUrl.\n     * The backendUrl and the path are expected not to have the api suffix / prefix included.\n     * The url is expected to be the path without the system and the api prefix.\n     * The data object is expected to be an json object containing the body information of the request.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * The call includes the auth headers for the current user.\n     * If the authInfo is passed, the request will send authentication headers to authenticate the user defined by\n     * the authInfo object.\n     * The apiVersion is the current api version of the backend.\n     * If the beforeRequest function is passed, those will be called after the data has been converted to snake_case and\n     * before the data is send to the server. This can be used to manipulate the data right before the request.\n     * The response json will be automatically converted to camelCase. ISO Date Strings will be automatically converted to date objects.\n     *\n     * @param backendUrl\n     * @param path\n     * @param data\n     * @param authInfo\n     * @param apiVersion\n     * @param beforeRequest\n     */\n    patch: async <TParams, TResponse>(\n        backendUrl: string,\n        path: string,\n        data: TParams,\n        authInfo: EzOnRailsAuthInfo | null = null,\n        apiVersion = '1.0',\n        beforeRequest: ((data: TParams) => TParams) | undefined = undefined\n    ): Promise<TResponse> => {\n        const url = EzOnRailsHttpUtils.toApiUrl(backendUrl, path);\n\n        if (data) {\n            data = EzOnRailsHttpUtils.toBackendParams(data);\n        }\n\n        if (beforeRequest) {\n            data = beforeRequest(data);\n        }\n\n        const result = await fetchWithThrow<TResponse>('PATCH', url, data, defaultHttpHeader(authInfo, apiVersion));\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Calls a http PUT action to the api at the specified path of an EzOnRails application at the backendUrl.\n     * The backendUrl and the path are expected not to have the api suffix / prefix included.\n     * The url is expected to be the path without the system and the api prefix.\n     * The data object is expected to be an json object containing the body information of the request.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * The call includes the auth headers for the current user.\n     * If the authInfo is passed, the request will send authentication headers to authenticate the user defined by\n     * the authInfo object.\n     * The apiVersion is the current api version of the backend.\n     * If the beforeRequest function is passed, those will be called after the data has been converted to snake_case and\n     * before the data is send to the server. This can be used to manipulate the data right before the request.\n     * The response json will be automatically converted to camelCase. ISO Date Strings will be automatically converted to date objects.\n     *\n     * @param backendUrl\n     * @param path\n     * @param data\n     * @param authInfo\n     * @param apiVersion\n     * @param beforeRequest\n     */\n    put: async <TParams, TResponse>(\n        backendUrl: string,\n        path: string,\n        data: TParams,\n        authInfo: EzOnRailsAuthInfo | null = null,\n        apiVersion = '1.0',\n        beforeRequest: ((data: TParams) => TParams) | undefined = undefined\n    ): Promise<TResponse> => {\n        const url = EzOnRailsHttpUtils.toApiUrl(backendUrl, path);\n\n        if (data) {\n            data = EzOnRailsHttpUtils.toBackendParams(data);\n        }\n\n        if (beforeRequest) {\n            data = beforeRequest(data);\n        }\n\n        const result = await fetchWithThrow<TResponse>('PUT', url, data, defaultHttpHeader(authInfo, apiVersion));\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Calls a http DELETE action to the api at the specified path of an EzOnRails application at the backendUrl.\n     * The backendUrl and the path are expected not to have the api suffix / prefix included.\n     * The url is expected to be the path without the system and the api prefix.\n     * The call includes the auth headers for the current user.\n     * The data object is expected to be an json object containing the body information of the request.\n     * The data object is automatically converted to snake case. Date objects are automatically converted to iso strings.\n     * In this case, the data object will be serialized to a get parameter string and will be appended to the url.\n     * The call includes the auth headers for the current user.\n     * If the authInfo is passed, the request will send authentication headers to authenticate the user defined by\n     * the authInfo object.\n     * The apiVersion is the current api version of the backend.\n     * If the beforeRequest function is passed, those will be called after the data has been converted to snake_case and\n     * before the data is send to the server. This can be used to manipulate the data right before the request.\n     * The response json will be automatically converted to camelCase. ISO Date Strings will be automatically converted to date objects.\n     *\n     * @param backendUrl\n     * @param path\n     * @param data\n     * @param authInfo\n     * @param apiVersion\n     * @param beforeRequest\n     */\n    delete: async <TParams, TResponse>(\n        backendUrl: string,\n        path: string,\n        data: TParams,\n        authInfo: EzOnRailsAuthInfo | null = null,\n        apiVersion = '1.0',\n        beforeRequest: ((data: TParams) => TParams) | undefined = undefined\n    ): Promise<TResponse> => {\n        let url = EzOnRailsHttpUtils.toApiUrl(backendUrl, path);\n\n        if (data) {\n            data = EzOnRailsHttpUtils.toBackendParams(data);\n        }\n\n        if (beforeRequest) {\n            data = beforeRequest(data);\n        }\n\n        if (data) {\n            url = `${url}?${EzOnRailsHttpUtils.toGetParameters(data)}`;\n        }\n\n        const result = await fetchWithThrow<TResponse>('DELETE', url, null, defaultHttpHeader(authInfo, apiVersion));\n\n        return EzOnRailsHttpUtils.toFrontendParams(result.body);\n    },\n\n    /**\n     * Returns the default headers used to make an authorized request.\n     * Can be used for custom requests without the ez-on-rails-react client.\n     *\n     * @param authInfo\n     * @param apiVersion\n     */\n    defaultHttpHeader: (authInfo: EzOnRailsAuthInfo | null, apiVersion: string): Record<string, string> => {\n        return defaultHttpHeader(authInfo, apiVersion);\n    }\n};\n", "import { useContext } from 'react';\nimport { EzOnRailsContext, EzOnRailsContextValue } from '../contexts/EzOnRails/Context';\n\n/**\n * Describes the result of the useEzOnRails hook.\n */\ntype UseEzOnRailsResult = EzOnRailsContextValue;\n\n/**\n * Hook that returns the context values including some methods to change it.\n */\nexport const useEzOnRails = (): UseEzOnRailsResult => {\n    return useContext<EzOnRailsContextValue>(EzOnRailsContext);\n};\n", "import { useCallback, useMemo, useState } from 'react';\nimport { EzOnRailsHttpClient } from '../http/client/EzOnRailsHttpClient';\nimport { EzOnRailsHttpUtils } from '../http/utils/EzOnRailsUtils';\nimport { EzOnRailsRecord, SearchFilter, SearchFilterComposition } from './types';\nimport { useEzOnRails } from './useEzOnRails';\n\n/**\n * Describes the result of the useEzScaff hook.\n */\ninterface UseEzScaffResult<TModel extends EzOnRailsRecord, TProperties = Omit<TModel, keyof EzOnRailsRecord>> {\n    // Result record for requests related to a single record, like show, create or update\n    record: TModel | null;\n\n    // Result records for requests related to multiple records, like index or search\n    records: TModel[] | null;\n\n    // Indicates that some request is currently in Progress\n    inProgress: boolean;\n\n    // Holds the error of the last request, if exists\n    error: unknown | null;\n\n    // Requests the index action of the record to receive all available records\n    // The result will also be saved in the records that are also returned by the hook.\n    getAll: () => Promise<TModel[] | null>;\n\n    // Requests the show action of the record having the specified id.\n    // Saves the result also in the record that is also returned by the hook.\n    getOne: (id: number) => Promise<TModel | null>;\n\n    // Requests records matching the specified query.\n    // Saves the result also in the records that are also returned by the hook.\n    search: (query: SearchFilter | SearchFilterComposition) => Promise<TModel[] | null>;\n\n    // Requests to create a record having the specified properties.\n    // Saves the result also in the record that is also returned by the hook.\n    create: (properties: TProperties) => Promise<TModel | null>;\n\n    // Requests to update a record having the specified id by the specified properties.\n    // Saves the result also in the record that is also returned by the hook.\n    update: (id: number, properties: Partial<TProperties>) => Promise<TModel | null>;\n\n    // Requests to delete the record having the specified id.\n    remove: (id: number) => Promise<void | null>;\n}\n\n/**\n * Hook that returns several methods and data related to model scaffolds of an EzOnRails Backend application.\n * The pluralModelName is the pluralized name of the model.\n * This hooks makes it possible to request CRUD and additional actions to the EzOnRails backend, related to the specified model.\n * This hook returns the methods to trigger several requests to the backend, like getting all, getting one record,\n * creating a record, updating a record, searching for records or deleting a record.\n * It also provides the requested data and status for the current request.\n *\n * @param pluralModelName\n */\nexport const useEzScaff = <TModel extends EzOnRailsRecord, TProperties = Omit<TModel, keyof EzOnRailsRecord>>(\n    pluralModelName: string\n): UseEzScaffResult<TModel, TProperties> => {\n    const { backendUrl, authInfo, apiVersion } = useEzOnRails();\n\n    const [record, setRecord] = useState<TModel | null>(null);\n    const [records, setRecords] = useState<TModel[] | null>(null);\n    const [inProgress, setInProgress] = useState<boolean>(false);\n    const [error, setError] = useState<unknown | null>(null);\n\n    /**\n     * Returns the base path to the scaffold endpoints from the specified pluralModelName.\n     */\n    const scaffoldBasePath: string = useMemo(() => {\n        return EzOnRailsHttpUtils.toSnakeCasePath(pluralModelName);\n    }, [pluralModelName]);\n\n    /**\n     * Calls the specified requestFunc asynchronous.\n     * Automatically sets the error and inProgress state, hence the only thing the requestFunc needs to do is\n     * to start the request and set the result states after it was successful.\n     * If an error occurs, null will be returned. Otherwise the result will of requestFunc will be returned.\n     */\n    const requestHttp = useCallback(\n        async <TResponse>(requestFunc: () => Promise<TResponse>): Promise<TResponse | null> => {\n            setError(null);\n            setInProgress(true);\n\n            try {\n                const result = await requestFunc();\n\n                setInProgress(false);\n\n                return result;\n            } catch (err: unknown) {\n                setInProgress(false);\n                setError(err);\n\n                return null;\n            }\n        },\n        []\n    );\n\n    /**\n     * Requests the index action related to the defined model on the backend side.\n     * Saves the result to the records that are returned by the hook.\n     * If some error occurs, the error will be saved in the error that is returned by the hook.\n     */\n    const getAll = useCallback(() => {\n        return requestHttp(async () => {\n            const result = await EzOnRailsHttpClient.get<null, TModel[]>(\n                backendUrl,\n                scaffoldBasePath,\n                null,\n                authInfo,\n                apiVersion\n            );\n\n            setRecords(result);\n\n            return result;\n        });\n    }, [backendUrl, authInfo, apiVersion, scaffoldBasePath]);\n\n    /**\n     * Requests the show action with the specified id related to the defined model on the backend side.\n     * Saves the result to the record that is returned by the hook.\n     * If some error occurs, the error will be saved in the error that is returned by the hook.\n     */\n    const getOne = useCallback(\n        (id: number) => {\n            return requestHttp(async () => {\n                const result = await EzOnRailsHttpClient.get<null, TModel>(\n                    backendUrl,\n                    `${scaffoldBasePath}/${id}`,\n                    null,\n                    authInfo,\n                    apiVersion\n                );\n\n                setRecord(result);\n\n                return result;\n            });\n        },\n        [backendUrl, authInfo, apiVersion, scaffoldBasePath]\n    );\n\n    /**\n     * Requests the search action related to the defined model on the backend side.\n     * Saves the result to the records that are returned by the hook.\n     * If some error occurs, the error will be saved in the error that is returned by the hook.\n     */\n    const search = useCallback(\n        (query: SearchFilter | SearchFilterComposition) => {\n            return requestHttp(async () => {\n                const result = await EzOnRailsHttpClient.get<SearchFilter | SearchFilterComposition, TModel[]>(\n                    backendUrl,\n                    scaffoldBasePath,\n                    query,\n                    authInfo,\n                    apiVersion\n                );\n\n                setRecords(result);\n\n                return result;\n            });\n        },\n        [backendUrl, authInfo, apiVersion, scaffoldBasePath]\n    );\n\n    /**\n     * Requests the create action with the specified properties related to the defined model on the backend side.\n     * Saves the result to the record that is returned by the hook.\n     * If some error occurs, the error will be saved in the error that is returned by the hook.\n     */\n    const create = useCallback(\n        (properties: TProperties) => {\n            return requestHttp(async () => {\n                const result = await EzOnRailsHttpClient.post<TProperties, TModel>(\n                    backendUrl,\n                    scaffoldBasePath,\n                    properties,\n                    authInfo,\n                    apiVersion\n                );\n\n                setRecord(result);\n\n                return result;\n            });\n        },\n        [backendUrl, authInfo, apiVersion, scaffoldBasePath]\n    );\n\n    /**\n     * Requests the update action with the specified id and properties related to the defined model on the backend side.\n     * Saves the result to the record that is returned by the hook.\n     * If some error occurs, the error will be saved in the error that is returned by the hook.\n     */\n    const update = useCallback(\n        (id: number, properties: Partial<TProperties>) => {\n            return requestHttp(async () => {\n                const result = await EzOnRailsHttpClient.patch<Partial<TProperties>, TModel>(\n                    backendUrl,\n                    `${scaffoldBasePath}/${id}`,\n                    properties,\n                    authInfo,\n                    apiVersion\n                );\n\n                setRecord(result);\n\n                return result;\n            });\n        },\n        [backendUrl, authInfo, apiVersion, scaffoldBasePath]\n    );\n\n    /**\n     * Requests the delete action with the specified id related to the defined model on the backend side.\n     * If some error occurs, the error will be saved in the error that is returned by the hook.\n     */\n    const remove = useCallback(\n        (id: number) => {\n            return requestHttp(async () => {\n                await EzOnRailsHttpClient.delete(backendUrl, `${scaffoldBasePath}/${id}`, null, authInfo, apiVersion);\n\n                setRecord(null);\n            });\n        },\n        [backendUrl, authInfo, apiVersion, scaffoldBasePath]\n    );\n\n    return {\n        record: record,\n        records: records,\n        inProgress: inProgress,\n        error: error,\n        getAll: getAll,\n        getOne: getOne,\n        search: search,\n        create: create,\n        update: update,\n        remove: remove\n    };\n};\n", "\nconst digest = '6597fb2ef423f9fe9e38df405cbcfac366421233e5f29a986f3e16fcc9f48e38';\nconst css = `._container_1c59p_1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n._fieldContainer_1c59p_8 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n}\n\n._fieldLabel_1c59p_15 {\n    font-size: large;\n}\n\n._formField_1c59p_19 {\n\n}\n\n._fieldError_1c59p_23 {\n\n}\n\n._fieldContainer_1c59p_8 .invalid-feedback {\n    font-size: small;\n    color: darkred;\n}\n\n._submitButton_1c59p_32 {\n\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_1c59p_1\",\"fieldContainer\":\"_fieldContainer_1c59p_8\",\"fieldLabel\":\"_fieldLabel_1c59p_15\",\"formField\":\"_formField_1c59p_19\",\"fieldError\":\"_fieldError_1c59p_23\",\"submitButton\":\"_submitButton_1c59p_32\"};\nexport { css, digest };\n  ", "import { Formik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { SchemaOf } from 'yup';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsAuthInfo, EzOnRailsHttpClient, EzOnRailsSignInParams } from '../../http/client/EzOnRailsHttpClient';\nimport { DefaultFormProps } from '../shared/types/Form';\nimport formStyles from '../shared/styles/Form.module.css';\n\n/**\n * Adds the stayLoggedIn checkbox to the SignIn values. This value will not be submitted to the server, but\n * will be passed in the callback if the request to sign in was successful. Hence the token can be saved\n * for new sessions.\n */\ntype SignInFormValues = EzOnRailsSignInParams & { stayLoggedIn: boolean };\n\n/**\n * Props for the LoginForm component.\n * Used to customize the login form.\n */\nexport interface LoginFormProps extends DefaultFormProps {\n    // The label for the email field\n    labelEmail?: string;\n\n    // The label for the password field\n    labelPassword?: string;\n\n    // The label for the stay logged in field\n    labelStayLoggedIn?: string;\n\n    // The text for an invalid email\n    invalidEmailErrorText?: string;\n\n    // The text for a required email error\n    emailRequiredErrorText?: string;\n\n    // The error text for a too short password\n    passwordToShortErrorText?: string;\n\n    // The error text for the required password\n    passwordRequiredErrorText?: string;\n\n    // Indicates whether the stayLoggedIn checkbox should be invisible\n    hideStayLoggedIn?: boolean;\n\n    // The minimum length of the password\n    minPasswordLength?: number;\n\n    // Called if the user successfully logged in. The email of the user and its auth info for the next request will be passed. Passes also if the user checked the stayLoggedIn checkbox.\n    onLoginSuccess?: (email: string, authInfo: EzOnRailsAuthInfo, stayLoggedIn: boolean) => Promise<void>;\n\n    // Called if the user login failed. The passed error is the exception.\n    onLoginError: (e: unknown) => void;\n}\n\n/**\n * Component for a default login form via EzOnRails.\n * Customizable with the props via css.\n *\n * @param props\n * @constructor\n */\nexport const LoginForm = (props: LoginFormProps) => {\n    const { backendUrl, apiVersion, setAuthInfo } = useEzOnRails();\n    const [inProgress, setInProgress] = useState<boolean>(false);\n\n    /**\n     * Valodation scheme for the login form.\n     */\n    const LoginValidationSchema: SchemaOf<EzOnRailsSignInParams> = Yup.object()\n        .shape({\n            email: Yup.string()\n                .email(props.invalidEmailErrorText || 'Invalid email address.')\n                .required(props.emailRequiredErrorText || 'The email address is required.'),\n            password: Yup.string()\n                .min(\n                    props.minPasswordLength || 8,\n                    props.passwordToShortErrorText ||\n                        `The password is too short. It must have at least ${props.minPasswordLength || 8} characters.`\n                )\n                .required(props.passwordRequiredErrorText || 'The password is required.')\n        })\n        .defined();\n\n    /**\n     * Tries to log in the user given by the form values.\n     * If the login was successful, the onLoginSuccess callback in the props will be called.\n     * In this case the email will be passed to the callback to identify the user.\n     * If the login was unsuccessful, the onLoginError callback in the props will be called.\n     * In this case the thrown error will be passed to the callback.\n     *\n     * @param values\n     */\n    const login = async (values: SignInFormValues) => {\n        setInProgress(true);\n\n        try {\n            const authInfo = await EzOnRailsHttpClient.signIn(backendUrl, values, apiVersion);\n            if (!authInfo) throw 'No authentication object returned';\n\n            setAuthInfo(authInfo);\n\n            if (!props.onLoginSuccess) return;\n\n            await props.onLoginSuccess(values.email, authInfo, values.stayLoggedIn);\n        } catch (e) {\n            props.onLoginError(e);\n            setInProgress(false);\n        }\n    };\n\n    // initial values\n    const initialFormValues: SignInFormValues = {\n        email: '',\n        password: '',\n        stayLoggedIn: false\n    };\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            onSubmit={(values) => {\n                login(values);\n            }}\n            validationSchema={LoginValidationSchema}\n        >\n            {({ errors, handleChange, handleSubmit }) => (\n                <form onSubmit={handleSubmit} className={props.containerClassName || formStyles.container}>\n                    <Form.Group\n                        id=\"email-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelEmail || 'Email address'}\n                        </Form.Label>\n\n                        <Form.Control\n                            id=\"email\"\n                            type=\"email\"\n                            onChange={handleChange}\n                            className={props.fieldInputClassName || formStyles.formField}\n                            isInvalid={!!errors.email}\n                        />\n                        <Form.Control.Feedback\n                            type=\"invalid\"\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                        >\n                            {errors.email}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group\n                        id=\"password-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelPassword || 'Password'}\n                        </Form.Label>\n\n                        <Form.Control\n                            id=\"password\"\n                            type=\"password\"\n                            onChange={handleChange}\n                            className={props.fieldInputClassName || formStyles.formField}\n                            isInvalid={!!errors.password}\n                        />\n                        <Form.Control.Feedback\n                            type=\"invalid\"\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                        >\n                            {errors.password}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    {!props.hideStayLoggedIn && (\n                        <Form.Group\n                            id=\"stay-logged-in-container\"\n                            className={props.fieldCheckboxContainerClassName || formStyles.fieldContainer}\n                        >\n                            <Form.Check\n                                id=\"stayLoggedIn\"\n                                className={props.fieldCheckboxInputClassName || formStyles.formField}\n                                type=\"checkbox\"\n                                label={props.labelStayLoggedIn || 'Stay logged in.'}\n                                onChange={handleChange}\n                            />\n                        </Form.Group>\n                    )}\n\n                    {!inProgress && (\n                        <div className={props.submitButtonContainerClassName || 'ez-on-rails-form-submit-container'}>\n                            <Button\n                                variant=\"primary\"\n                                type=\"submit\"\n                                className={props.submitButtonClassName || formStyles.submitButton}\n                            >\n                                {props.labelSubmitButton || 'Login'}\n                            </Button>\n                        </div>\n                    )}\n                </form>\n            )}\n        </Formik>\n    );\n};\n", "\nconst digest = 'f9f52e78e174bf1d2ef410620bc0a8a1cdfe4cf1721e3e0c1621166cce52d43b';\nconst css = `._container_1c59p_1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n._fieldContainer_1c59p_8 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n}\n\n._fieldLabel_1c59p_15 {\n    font-size: large;\n}\n\n._formField_1c59p_19 {\n\n}\n\n._fieldError_1c59p_23 {\n\n}\n\n._fieldContainer_1c59p_8 .invalid-feedback {\n    font-size: small;\n    color: darkred;\n}\n\n._submitButton_1c59p_32 {\n\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_1c59p_1\",\"fieldContainer\":\"_fieldContainer_1c59p_8\",\"fieldLabel\":\"_fieldLabel_1c59p_15\",\"formField\":\"_formField_1c59p_19\",\"fieldError\":\"_fieldError_1c59p_23\",\"submitButton\":\"_submitButton_1c59p_32\"};\nexport { css, digest };\n  ", "import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { SchemaOf } from 'yup';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsHttpClient, EzOnRailsPasswordResetInstructionsParams } from '../../http/client/EzOnRailsHttpClient';\nimport { Formik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { DefaultFormProps } from '../shared/types/Form';\nimport formStyles from '../shared/styles/Form.module.css';\n\n/**\n * Type for props for the LostPasswordForm component.\n */\nexport interface LostPasswordFormProps extends DefaultFormProps {\n    // The error text if the user types an invalid email\n    invalidEmailErrorText?: string;\n\n    // The error text if the user types no email\n    emailRequiredErrorText?: string;\n\n    // The label for the email\n    labelEmail?: string;\n\n    // Called if the request to send new password instructions was successful. The email is the email the request was send to.\n    onLostPasswordSuccess: (email: string) => void;\n\n    // Called if the request to send new password instructions was successful. The error is the exception that was thrown during the request.\n    onLostPasswordError: (e: unknown) => void;\n}\n\n/**\n * Component for a form to send a password reset token.\n *\n * @param props\n * @constructor\n */\nexport const LostPasswordForm = (props: LostPasswordFormProps) => {\n    const { backendUrl, apiVersion } = useEzOnRails();\n    const [inProgress, setInProgress] = useState<boolean>(false);\n\n    /**\n     * Valodation scheme for the login form.\n     */\n    const LostPasswordValidationSchema: SchemaOf<EzOnRailsPasswordResetInstructionsParams> = Yup.object()\n        .shape({\n            email: Yup.string()\n                .email(props.invalidEmailErrorText || 'Invalid email address.')\n                .required(props.emailRequiredErrorText || 'The email address is required.')\n        })\n        .defined();\n\n    /**\n     * Tries to send a password reset request to the server by the form values.\n     * If the request was successfull, the onPasswordResetSuccess callback in the props will be called.\n     * In this case the email will be passed to the callback to identify the user.\n     * If the login was unsuccessfull, the onPasswordResetError callback in the props will be called.\n     * In this case the thrown error will be passed to the callback.\n     *\n     * @param values\n     */\n    const passwordReset = (values: EzOnRailsPasswordResetInstructionsParams) => {\n        setInProgress(true);\n\n        EzOnRailsHttpClient.passwordResetInstructions(backendUrl, values, apiVersion)\n            .then(() => {\n                props.onLostPasswordSuccess(values.email);\n\n                setInProgress(false);\n            })\n            .catch((e) => {\n                props.onLostPasswordError(e);\n                setInProgress(false);\n            });\n    };\n\n    // initial values\n    const initialFormValues: EzOnRailsPasswordResetInstructionsParams = {\n        email: ''\n    };\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            onSubmit={(values) => {\n                passwordReset(values);\n            }}\n            validationSchema={LostPasswordValidationSchema}\n        >\n            {({ errors, handleChange, handleSubmit }) => (\n                <form onSubmit={handleSubmit} className={props.containerClassName || formStyles.container}>\n                    <Form.Group\n                        id=\"email-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelEmail || 'Email address'}\n                        </Form.Label>\n                        <Form.Control\n                            id=\"email\"\n                            type=\"email\"\n                            onChange={handleChange}\n                            className={props.fieldInputClassName || formStyles.formField}\n                            isInvalid={!!errors.email}\n                        />\n                        <Form.Control.Feedback\n                            type=\"invalid\"\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                        >\n                            {errors.email}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    {!inProgress && (\n                        <div className={props.submitButtonContainerClassName || 'ez-on-rails-form-submit-container'}>\n                            <Button\n                                variant=\"primary\"\n                                type=\"submit\"\n                                className={props.submitButtonClassName || formStyles.submitButton}\n                            >\n                                {props.labelSubmitButton || 'Submit'}\n                            </Button>\n                        </div>\n                    )}\n                </form>\n            )}\n        </Formik>\n    );\n};\n", "\nconst digest = '1b2b7d0082579b5f3b82558d8d63cd1ca5254acc2ba179d1791f3b7274e3007a';\nconst css = `._container_1c59p_1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n._fieldContainer_1c59p_8 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n}\n\n._fieldLabel_1c59p_15 {\n    font-size: large;\n}\n\n._formField_1c59p_19 {\n\n}\n\n._fieldError_1c59p_23 {\n\n}\n\n._fieldContainer_1c59p_8 .invalid-feedback {\n    font-size: small;\n    color: darkred;\n}\n\n._submitButton_1c59p_32 {\n\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_1c59p_1\",\"fieldContainer\":\"_fieldContainer_1c59p_8\",\"fieldLabel\":\"_fieldLabel_1c59p_15\",\"formField\":\"_formField_1c59p_19\",\"fieldError\":\"_fieldError_1c59p_23\",\"submitButton\":\"_submitButton_1c59p_32\"};\nexport { css, digest };\n  ", "import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { SchemaOf } from 'yup';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsConfirmationInstructionsParams, EzOnRailsHttpClient } from '../../http/client/EzOnRailsHttpClient';\nimport { Formik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { DefaultFormProps } from '../shared/types/Form';\nimport formStyles from '../shared/styles/Form.module.css';\n\n/**\n * Type for props for the ResendConfirmationForm component.\n */\nexport interface ResendConfirmationFormProps extends DefaultFormProps {\n    // The error text if the user types an invalid email\n    invalidEmailErrorText?: string;\n\n    // The error text if the user types no email\n    emailRequiredErrorText?: string;\n\n    // The label for the email\n    labelEmail?: string;\n\n    // Called if the request to resend confirmation instructions was successful. The email is the email the request was send to.\n    onResendConfirmationSuccess: (email: string) => void;\n\n    // Called if the request to resend confirmation instructions was successful. The error is the exception that was thrown during the request.\n    onResendConfirmationError: (e: unknown) => void;\n}\n\n/**\n * Component for a form to send a resend confirmation email.\n *\n * @param props\n * @constructor\n */\nexport const ResendConfirmationForm = (props: ResendConfirmationFormProps) => {\n    const { backendUrl, apiVersion } = useEzOnRails();\n    const [inProgress, setInProgress] = useState<boolean>(false);\n\n    /**\n     * Valodation scheme for the login form.\n     */\n    const ResendConfirmationValidationSchema: SchemaOf<EzOnRailsConfirmationInstructionsParams> = Yup.object()\n        .shape({\n            email: Yup.string()\n                .email(props.invalidEmailErrorText || 'Invalid email address.')\n                .required(props.emailRequiredErrorText || 'An email address is required.')\n        })\n        .defined();\n\n    /**\n     * Tries to send a resend confirmation email request to the server by the form values.\n     * If the request was successfull, the onResendConfirmationSuccess callback in the props will be called.\n     * In this case the email will be passed to the callback to identify the user.\n     * If the login was unsuccessfull, the onResendConfirmationError callback in the props will be called.\n     * In this case the thrown error will be passed to the callback.\n     *\n     * @param values\n     */\n    const resendConfirmation = (values: EzOnRailsConfirmationInstructionsParams) => {\n        setInProgress(true);\n\n        EzOnRailsHttpClient.confirmationInstructions(backendUrl, values, apiVersion)\n            .then(() => {\n                props.onResendConfirmationSuccess(values.email);\n\n                setInProgress(false);\n            })\n            .catch((e) => {\n                props.onResendConfirmationError(e);\n                setInProgress(false);\n            });\n    };\n\n    // initial values\n    const initialFormValues: EzOnRailsConfirmationInstructionsParams = {\n        email: ''\n    };\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            onSubmit={(values) => {\n                resendConfirmation(values);\n            }}\n            validationSchema={ResendConfirmationValidationSchema}\n        >\n            {({ errors, handleChange, handleSubmit }) => (\n                <form onSubmit={handleSubmit} className={props.containerClassName || formStyles.container}>\n                    <Form.Group\n                        id=\"email-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelEmail || 'Email address'}\n                        </Form.Label>\n                        <Form.Control\n                            id=\"email\"\n                            type=\"email\"\n                            onChange={handleChange}\n                            className={props.fieldInputClassName || formStyles.formField}\n                            isInvalid={!!errors.email}\n                        />\n                        <Form.Control.Feedback\n                            type=\"invalid\"\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                        >\n                            {errors.email}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    {!inProgress && (\n                        <div className={props.submitButtonContainerClassName || 'ez-on-rails-form-submit-container'}>\n                            <Button\n                                variant=\"primary\"\n                                type=\"submit\"\n                                className={props.submitButtonClassName || formStyles.submitButton}\n                            >\n                                {props.labelSubmitButton || 'Submit'}\n                            </Button>\n                        </div>\n                    )}\n                </form>\n            )}\n        </Formik>\n    );\n};\n", "\nconst digest = '08faa1fc3d8d44ac793d64f9044157186548fdbc461a48c463085815552fa55e';\nconst css = `._container_1c59p_1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n._fieldContainer_1c59p_8 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n}\n\n._fieldLabel_1c59p_15 {\n    font-size: large;\n}\n\n._formField_1c59p_19 {\n\n}\n\n._fieldError_1c59p_23 {\n\n}\n\n._fieldContainer_1c59p_8 .invalid-feedback {\n    font-size: small;\n    color: darkred;\n}\n\n._submitButton_1c59p_32 {\n\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_1c59p_1\",\"fieldContainer\":\"_fieldContainer_1c59p_8\",\"fieldLabel\":\"_fieldLabel_1c59p_15\",\"formField\":\"_formField_1c59p_19\",\"fieldError\":\"_fieldError_1c59p_23\",\"submitButton\":\"_submitButton_1c59p_32\"};\nexport { css, digest };\n  ", "import React, { useState } from 'react';\nimport styles from './DevelopmentHint.module.css';\n\n/**\n * Props for the DevelopmentHint component.\n */\nexport interface DevelopmentHintProps {\n    // Indicates whether the hint should be dispalyed\n    visible: boolean;\n\n    // A timeout that indicates after what amount of time the component should be shown again after dismiss\n    dismissTimeout?: number;\n}\n\n/**\n * Component that shows a sticky hint that the app is running in development mode.\n * The environment is only shown if the prop show is true.\n * This prop can e.g. be set by comparing the root apps NODE_ENV variable against not being in production.\n * The components is dismissable if it is clicked.\n * If it is dismissed, a timer is running. After the timer elapsed, it will be shown again.\n * If the dismissTimeout prop is not set, the component will respawn after 20 seconds.\n *\n * @constructor\n */\nexport const DevelopmentHint = (props: DevelopmentHintProps) => {\n    const [visible, setVisible] = useState<boolean>(props.visible);\n\n    /**\n     * Called after the last dismiss timeout triggers.\n     * Sets the visibility for the compoonent to true.\n     */\n    const dismissTimeout = () => {\n        setVisible(true);\n    };\n\n    /**\n     * Called if the user clicks on the container.\n     * Sets the visible state to false and starts a timeout that shows the component again\n     * after a while. Those timeout is set to the props dismissTimeout or 20 seconds, if the\n     * dismissTimeout is not given.\n     */\n    const onClickContainer = () => {\n        setVisible(false);\n        setTimeout(dismissTimeout, props.dismissTimeout || 20000);\n    };\n\n    return visible ? (\n        <div onClick={onClickContainer} className={styles.container}>\n            <span className={styles.text}>development</span>\n        </div>\n    ) : null;\n};\n", "\nconst digest = 'dfffe9637f7a60407aac13517bbfb11ff47b3851dabc1a2667ff9fbba65f0561';\nconst css = `._container_q2u8x_1 {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #28a745;\n    height: 1.5em;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n}\n\n._text_q2u8x_13 {\n    color: white;\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_q2u8x_1\",\"text\":\"_text_q2u8x_13\"};\nexport { css, digest };\n  ", "import React from 'react';\nimport * as ActiveStorage from '@rails/activestorage';\nimport { ReactNode, useState } from 'react';\nimport { ClipboardEvent, MouseEvent } from 'react';\nimport Dropzone, { Accept, ErrorCode, FileRejection, useDropzone } from 'react-dropzone';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsHttpUtils } from '../../http/utils/EzOnRailsUtils';\nimport { EzOnRailsHttpClient } from '../../http/client/EzOnRailsHttpClient';\nimport styles from './ActiveStorageDropzone.module.css';\n\n/**\n * Returns the relative url from the backend url to show the blob having the specified signedId and filename from the backend.\n *\n * @param signedId\n * @param filename\n */\nexport const blobShowPath = (signedId: string, filename: string): string => {\n    return `rails/active_storage/blobs/${signedId}/${filename}`;\n};\n\n/**\n * Describes a rails file blob.\n */\nexport interface RailsFileBlob {\n    signedId?: string;\n    path?: string;\n    filename?: string;\n}\n\n/**\n * Props for the ActiveStorageDropzone component.\n */\nexport interface ActiveStorageDropzoneProps {\n    // Called if the files value changed.\n    onChange: (files: RailsFileBlob[]) => void;\n\n    // Used for edit action to initially load the existing files to the dropzone\n    files: RailsFileBlob[];\n\n    // The text shown in the dropzone component. Use empty string to show no text\n    textDropzone?: string;\n\n    // The text shown in the pastezone component\n    textPastezone?: string;\n\n    // Indicates whether multiple files are allowed.\n    multiple: boolean;\n\n    // If multiple is true, this is the maximum number of allowed files\n    maxFiles: number;\n\n    // Called if the user tried to insert more files than the limit to maxFiles\n    onMaxFilesError: (maxFiles: number) => void;\n\n    // The maximum size of a file allowed in bytes\n    maxSize: number;\n\n    // Called if the user tried to insert files having more than the limited maxSize\n    onMaxSizeError: (maxSize: number) => void;\n\n    // One media type to filter allowed files. This can be used to allow only images for instance\n    accept?: Accept;\n\n    // Called if the user tried to upload a file with a type that is not accepted\n    onInvalidTypeError: (accept: Accept | undefined) => void;\n\n    // Indicates if the paste zone should be available\n    pasteZone?: boolean;\n\n    // set custom icon for dropzone\n    customIcon?: React.ReactNode;\n\n    // set custom styling\n    className?: string;\n}\n\n/**\n * Image Uploader component for active storage content having a React dropzone\n * and some input field for pasting content.\n */\nexport const ActiveStorageDropzone = (props: ActiveStorageDropzoneProps) => {\n    const { backendUrl, authInfo, apiVersion } = useEzOnRails();\n    const [uploadsInProgress, setUploadsInProgress] = useState<number>(0);\n\n    // standard upload icon for dropzone (from boostrap icons)\n    const standardUploadIcon = (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"32\"\n            height=\"32\"\n            fill=\"currentColor\"\n            className=\"bi bi-cloud-arrow-up\"\n            viewBox=\"0 0 16 16\"\n        >\n            <path\n                fillRule=\"evenodd\"\n                d=\"M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2z\"\n            />\n            <path d=\"M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z\" />\n        </svg>\n    );\n\n    /**\n     * Removes the file having the given signedId from the server.\n     *\n     * @param signedId\n     */\n    const removeFileFromServer = async (signedId: string) => {\n        await EzOnRailsHttpClient.delete(backendUrl, `active_storage/blobs/${signedId}`, null, authInfo, apiVersion);\n    };\n\n    /**\n     * Removes the file having the specified signedId from the server and the dropzone,\n     *\n     * @param event The javascript event to stop other onclick callbacks.\n     * @param signedId The signed id of the image.\n     */\n    const removeFile = async (event: MouseEvent, signedId: string) => {\n        // remove file from server to prevent garbage\n        await removeFileFromServer(signedId);\n\n        // Remove from this component\n        let newFiles = [...props.files];\n        newFiles = newFiles.filter((file) => signedId !== file.signedId);\n        props.onChange(newFiles);\n\n        // Supress dropzones onclick callback\n        event.stopPropagation();\n    };\n\n    /**\n     * Called if some direct upload updates its progress.\n     * Updates the state to rerender the view.\n     *\n     * @param event\n     */\n    const onDirectUploadProgress = (event: ProgressEvent<XMLHttpRequestEventTarget>) => {\n        if (event.loaded / event.total >= 0.9999999) {\n            // console.log('Upload finished');\n        }\n    };\n\n    /**\n     * Called by the dropzone if some file is dropped into it.\n     * Uploads the file to the active storage.\n     *\n     * @param acceptedFiles The dropped files.\n     */\n    const onDropAccepted = (acceptedFiles: File[]) => {\n        // if we have no acceptedFiles, just leave\n        if (!acceptedFiles.length) return;\n\n        // Only allow as many acceptedFiles as specified\n        // This check is necessary, since there is no rejection callback from the dropzone,\n        //   if there is already a file in the dropzone and another file with the correct size and type was added,\n        //   but the total number of files would exceed the allowed number.\n        // However, the rejection callback is invoked, if the dropzone is initially empty and\n        //   too many files (with the correct size and type) were dropped.\n        if (props.maxFiles) {\n            const maxNewFiles = props.maxFiles - (props.files.length + uploadsInProgress);\n\n            if (maxNewFiles < acceptedFiles.length) {\n                props.onMaxFilesError(props.maxFiles);\n            }\n\n            if (maxNewFiles <= 0) return;\n\n            acceptedFiles = acceptedFiles.slice(0, maxNewFiles);\n        }\n\n        // Only allow files with limited size\n        if (props.maxSize) {\n            const sizeFilteredFiles = acceptedFiles.filter((file) => file.size <= props.maxSize);\n            if (sizeFilteredFiles.length < acceptedFiles.length) {\n                // TODO: Is this callback ever called?\n                props.onMaxSizeError(props.maxSize);\n            }\n\n            acceptedFiles = sizeFilteredFiles;\n        }\n\n        // Update the number of uploads for feedback\n        setUploadsInProgress((uploadsInProgress) => uploadsInProgress + acceptedFiles.length);\n\n        // try to upload every file\n        acceptedFiles.forEach((acceptedFile) => {\n            // upload the file to the active storage\n            // let uploader = new ActiveStorageUploader(onDirectUploadProgress, props.authInfo)\n            const upload = new ActiveStorage.DirectUpload(\n                acceptedFile,\n                EzOnRailsHttpUtils.toApiUrl(backendUrl, 'active_storage/blobs/create_direct_upload'),\n                {\n                    directUploadWillCreateBlobWithXHR: (request: XMLHttpRequest) => {\n                        const httpHeader: { [key: string]: string } = EzOnRailsHttpClient.defaultHttpHeader(\n                            authInfo,\n                            apiVersion\n                        );\n\n                        Object.keys(httpHeader).forEach((key) => {\n                            request.setRequestHeader(key, httpHeader[key]);\n                        });\n\n                        request.upload.addEventListener('progress', onDirectUploadProgress);\n                    }\n                }\n            );\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            upload.create((error: Error, blob: any) => {\n                setUploadsInProgress((uploadsInProgress) => uploadsInProgress - 1);\n                // if some error occurs, just print it to the console and do nothing else\n                if (error) {\n                    // console.log('Image Error:', error);\n                } else {\n                    const file: RailsFileBlob = { signedId: blob.signed_id };\n                    // create preview image, if this is an image, otherwise, just create a preview Text\n                    if (acceptedFile.type.includes('image')) {\n                        file.path = blobShowPath(blob.signed_id, blob.filename);\n                    } else {\n                        file.filename = blob.filename;\n                    }\n\n                    // Set current files to render them\n                    const newFiles = props.files;\n                    newFiles.push(file);\n                    props.onChange([...newFiles]);\n                }\n            });\n        });\n    };\n\n    /**\n     * Called if some value is pasted into the input paste field.\n     * Tries to catch the value. If it is a file, it will be pasted into\n     * the dropzone.\n     *\n     * @param event The javascript event.\n     */\n    const onPaste = (event: ClipboardEvent<HTMLInputElement>) => {\n        // if no clipboard was detected\n        if (!event.clipboardData) return;\n\n        // catch all clipboard items, if exists\n        const items = event.clipboardData.items;\n        if (items === undefined) return;\n\n        const pastedFiles = [];\n        // @ts-ignore this is nonsense, it is iterable...\n        for (const item of items) {\n            // this item is no image\n            if (props.accept && !Object.keys(props.accept).some((type) => item.type.match(type))) continue;\n\n            const file = item.getAsFile();\n\n            if (file) {\n                pastedFiles.push(file);\n            }\n        }\n\n        onDropAccepted(pastedFiles);\n    };\n\n    // preview of the current stated files\n    const previews = props.files.map((file) => (\n        <div\n            key={file.signedId}\n            className=\"card w-25 animate__animated animate__fadeIn mb-4\"\n            style={{ flex: '0 0 auto' }}\n        >\n            <div className={'card-header p-1'}>\n                <button\n                    onClick={(event) => removeFile(event, file.signedId || '')}\n                    type=\"button\"\n                    className=\"close\"\n                    aria-label=\"Close\"\n                >\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div className={'d-flex justify-content-center align-items-center w-100 h-100'}>\n                <img\n                    src={EzOnRailsHttpUtils.toBaseUrl(backendUrl, file.path || '')}\n                    alt={file.filename}\n                    className={'d-block mw-100 m-auto m-0 rounded p-1'}\n                />\n            </div>\n        </div>\n    ));\n\n    // shows some indicator for some incoming files\n    const progressSpinners: ReactNode[] = [];\n\n    for (let i = 0; i < uploadsInProgress; i++) {\n        progressSpinners.push(\n            <div key={i} className=\"card w-25 mb-4\" style={{ flex: '0 0 auto' }}>\n                <div className={'d-flex justify-content-center align-items-center w-100 h-100'}>\n                    <div className=\"p-4 text-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * Called if one or more files were rejected by the dropzone.\n     * Checks why the files were rejected and calls the related callbacks in the props.\n     *\n     * @param fileRejections\n     */\n    const onDropzoneRejection = (fileRejections: FileRejection[]) => {\n        // too many files ?\n        if (fileRejections.some((fileRejection) => fileRejection.errors[0].code === ErrorCode.TooManyFiles)) {\n            props.onMaxFilesError(props.maxFiles);\n        }\n\n        // invalid type ?\n        if (fileRejections.some((fileRejection) => fileRejection.errors[0].code === ErrorCode.FileInvalidType)) {\n            props.onInvalidTypeError(props.accept);\n        }\n\n        // file too large ?\n        if (fileRejections.some((fileRejection) => fileRejection.errors[0].code === ErrorCode.FileTooLarge)) {\n            props.onMaxSizeError(props.maxSize);\n        }\n    };\n\n    // dropzone having a drop area\n    return (\n        <div>\n            {props.pasteZone && (\n                <input\n                    type=\"text\"\n                    className={`w-100 p-2 ${styles.pastezoneContainer}`}\n                    value={props.textPastezone || 'Copy and paste some files here'}\n                    onPaste={onPaste}\n                    readOnly\n                />\n            )}\n            <Dropzone\n                onDropAccepted={onDropAccepted}\n                multiple={props.multiple}\n                maxFiles={props.maxFiles}\n                maxSize={props.maxSize}\n                onDropRejected={onDropzoneRejection}\n                accept={props.accept}\n            >\n                {({ getRootProps, getInputProps } = useDropzone()) => (\n                    <section>\n                        <div {...getRootProps()} className={`${styles.dropzoneContainer} p-4 ${props.className}`}>\n                            {/* the file input field, but invisible */}\n                            <input {...getInputProps()} />\n\n                            <p className={'m-0'}>\n                                {props.textDropzone || \"Drag 'n' drop some files here, or click to select files\"}\n                            </p>\n\n                            {/* The preview of the current uploaded files */}\n                            {previews.length > 0 ? (\n                                <aside className={'card-deck justify-content-center w-100 m-4'}>{previews}</aside>\n                            ) : (\n                                <div className={'m-0'}>{props.customIcon || standardUploadIcon}</div>\n                            )}\n                            {progressSpinners.length > 0 && (\n                                <aside className={'card-deck justify-content-center w-100 m-4'}>\n                                    {progressSpinners}\n                                </aside>\n                            )}\n                        </div>\n                    </section>\n                )}\n            </Dropzone>\n        </div>\n    );\n};\n", "\nconst digest = '2013c8a62515dd4a9efd3fcc3573094b9682aa9201896f90ad5202d6d823fae2';\nconst css = `._dropzoneContainer_14oft_1 {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: #eeeeee;\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  width: 100%;\n}\n\n._dropzoneContainer_14oft_1 img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n._pastezoneContainer_14oft_19 {\n  text-align: center;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: #eeeeee;\n  border-style: solid;\n  border-bottom: none;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  width: 100%;\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"dropzoneContainer\":\"_dropzoneContainer_14oft_1\",\"pastezoneContainer\":\"_pastezoneContainer_14oft_19\"};\nexport { css, digest };\n  ", "import { Formik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport React, { useCallback, useState } from 'react';\nimport * as Yup from 'yup';\nimport { SchemaOf } from 'yup';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsHttpClient, EzOnRailsPasswordResetParams } from '../../http/client/EzOnRailsHttpClient';\nimport { DefaultFormProps } from '../shared/types/Form';\nimport formStyles from '../shared/styles/Form.module.css';\n\n/**\n * The form values to reset the password do not hold bthe resetPasswordToken. The token is passed\n * via the props and merged into the requests params with the provided values.\n */\ntype ResetPasswordFormValues = Omit<EzOnRailsPasswordResetParams, 'resetPasswordToken'>;\n\n/**\n * Props for the RequestPasswordForm component.\n * Used to customize the request password form form.\n */\nexport interface ResetPasswordFormProps extends DefaultFormProps {\n    // The token to reset the password on the backend\n    resetPasswordToken: string;\n\n    // The label for the passsword field\n    labelPassword?: string;\n\n    // The label for the password confirmation field\n    labelPasswordConfirmation?: string;\n\n    // The text for a required password error\n    passwordRequiredErrorText?: string;\n\n    // The error text for a too short password\n    passwordToShortErrorText?: string;\n\n    // The error text if the password and passwordConfirmation do not match\n    passwordConfirmationMatchErrorText?: string;\n\n    // The minimum length of the password\n    minPasswordLength?: number;\n\n    // Called if the user successfully resetted the password.\n    onResetPasswordSuccess: () => Promise<void>;\n\n    // Called if the submit failed. The passed error is the exception.\n    onResetPasswordError: (e: unknown) => void;\n}\n\n/**\n * Component for a default password reset form via EzOnRails.\n * Customizable with the props via css.\n *\n * @param props\n * @constructor\n */\nexport const ResetPasswordForm = (props: ResetPasswordFormProps) => {\n    const { backendUrl, apiVersion } = useEzOnRails();\n    const [inProgress, setInProgress] = useState<boolean>(false);\n\n    /**\n     * Valodation scheme for the password reset form.\n     */\n    const PasswordResetValidationSchema: SchemaOf<EzOnRailsPasswordResetParams> = Yup.object()\n        .shape({\n            password: Yup.string()\n                .min(\n                    props.minPasswordLength || 8,\n                    props.passwordToShortErrorText ||\n                        `The password is too short. It must have at least ${props.minPasswordLength || 8} characters.`\n                )\n                .required(props.passwordRequiredErrorText || 'A password is required.'),\n            passwordConfirmation: Yup.string().oneOf(\n                [Yup.ref('password')],\n                props.passwordConfirmationMatchErrorText || 'The password and its confirmation must match.'\n            )\n        })\n        .defined();\n\n    /**\n     * Tries to reset the password on the server side.\n     * If the reset was successful, the onSuccess callback in the props will be called.\n     * If the reset was unsuccessful, the onError callback in the props will be called.\n     * In this case the thrown error will be passed to the callback.\n     *\n     * @param values\n     */\n    const resetPassword = useCallback(\n        async (values: ResetPasswordFormValues) => {\n            setInProgress(true);\n\n            try {\n                await EzOnRailsHttpClient.passwordReset(\n                    backendUrl,\n                    {\n                        ...values,\n                        ...{ resetPasswordToken: props.resetPasswordToken }\n                    },\n                    apiVersion\n                );\n\n                await props.onResetPasswordSuccess();\n            } catch (e) {\n                props.onResetPasswordError(e);\n                setInProgress(false);\n            }\n        },\n        [props.resetPasswordToken]\n    );\n\n    // initial values\n    const initialFormValues: ResetPasswordFormValues = {\n        password: '',\n        passwordConfirmation: ''\n    };\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            onSubmit={(values) => {\n                resetPassword(values);\n            }}\n            validationSchema={PasswordResetValidationSchema}\n        >\n            {({ errors, handleChange, handleSubmit }) => (\n                <form onSubmit={handleSubmit} className={props.containerClassName || formStyles.container}>\n                    <Form.Group\n                        id=\"password-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelPassword || 'Password'}\n                        </Form.Label>\n\n                        <Form.Control\n                            id=\"password\"\n                            type=\"password\"\n                            onChange={handleChange}\n                            className={props.fieldInputClassName || formStyles.formField}\n                            isInvalid={!!errors.password}\n                        />\n                        <Form.Control.Feedback\n                            type=\"invalid\"\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                        >\n                            {errors.password}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group\n                        id=\"password-confirmation-container\"\n                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                    >\n                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                            {props.labelPasswordConfirmation || 'Password confirmation'}\n                        </Form.Label>\n\n                        <Form.Control\n                            id=\"passwordConfirmation\"\n                            type=\"password\"\n                            onChange={handleChange}\n                            className={props.fieldInputClassName || formStyles.formField}\n                            isInvalid={!!errors.passwordConfirmation}\n                        />\n                        <Form.Control.Feedback\n                            type=\"invalid\"\n                            className={props.fieldErrorClassName || formStyles.fieldError}\n                        >\n                            {errors.passwordConfirmation}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    {!inProgress && (\n                        <div className={props.submitButtonContainerClassName || 'ez-on-rails-form-submit-container'}>\n                            <Button\n                                variant=\"primary\"\n                                type=\"submit\"\n                                className={props.submitButtonClassName || formStyles.submitButton}\n                            >\n                                {props.labelSubmitButton || 'Submit'}\n                            </Button>\n                        </div>\n                    )}\n                </form>\n            )}\n        </Formik>\n    );\n};\n", "\nconst digest = '7e6e9d3476df316f599dacca7b14adb07957a7b8dc1d0e9b7c5e39cfe0affcbc';\nconst css = `._container_1c59p_1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n._fieldContainer_1c59p_8 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n}\n\n._fieldLabel_1c59p_15 {\n    font-size: large;\n}\n\n._formField_1c59p_19 {\n\n}\n\n._fieldError_1c59p_23 {\n\n}\n\n._fieldContainer_1c59p_8 .invalid-feedback {\n    font-size: small;\n    color: darkred;\n}\n\n._submitButton_1c59p_32 {\n\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_1c59p_1\",\"fieldContainer\":\"_fieldContainer_1c59p_8\",\"fieldLabel\":\"_fieldLabel_1c59p_15\",\"formField\":\"_formField_1c59p_19\",\"fieldError\":\"_fieldError_1c59p_23\",\"submitButton\":\"_submitButton_1c59p_32\"};\nexport { css, digest };\n  ", "import React from 'react';\nimport { useEzOnRails } from '../../hooks';\n\n/**\n * Props for the ProtectedPage component.\n */\nexport interface ProtectedPageProps {\n    // the children that are shown if the page can be accessed\n    children: React.ReactNode;\n\n    // Optional class name to style the access denied hint\n    accessDeniedClassName?: string;\n\n    // The text shown if the access was denied. If not given, some default text will be shown.\n    accessDeniedText?: string;\n}\n\n/**\n * Protects the page given by the children prop from being accessed without authorization.\n * If the authInfo given by the props are null, only a hint will be shown that the page is\n * not accessible. Otherwise the children will be rendered.\n *\n * @param props\n * @constructor\n */\nexport const ProtectedPage = (props: ProtectedPageProps) => {\n    const { authInfo } = useEzOnRails();\n\n    return (\n        <div>\n            {authInfo ? (\n                props.children\n            ) : (\n                <div className={props.accessDeniedClassName || 'ez-on-rails-protected-page-access-denied-container'}>\n                    {props.accessDeniedText || 'You must be signed in to see this content.'}\n                </div>\n            )}\n        </div>\n    );\n};\n", "import React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup';\nimport { SchemaOf } from 'yup';\nimport { Formik } from 'formik';\nimport { useEzOnRails } from '../../hooks';\nimport { EzOnRailsHttpClient, EzOnRailsUpdateUserParams, EzOnRailsUser } from '../../http/client/EzOnRailsHttpClient';\nimport { Button, Form } from 'react-bootstrap';\nimport { ActiveStorageDropzone } from '../ActiveStorageDropzone/ActiveStorageDropzone';\nimport { DefaultFormProps } from '../shared/types/Form';\nimport formStyles from '../shared/styles/Form.module.css';\n\n/**\n * Props for the UpdateUserForm.\n * Used to customize the register form.\n */\nexport interface UpdateUserFormProps extends DefaultFormProps {\n    // The error text if the user types a too short username\n    usernameToShortErrorText?: string;\n\n    // The error text if the user types a too long username\n    usernameToLongErrorText?: string;\n\n    // The error text if the user does not provide a username\n    usernameRequiredErrorText?: string;\n\n    // The error text if the user types an invalid email\n    emailInvalidErrorText?: string;\n\n    // The error text if the user does not provide an email\n    emailRequiredErrorText?: string;\n\n    // The error text if the user types a too long email\n    emailToLongErrorText?: string;\n\n    // The error text if the user types a to short password\n    passwordToShortErrorText?: string;\n\n    // The error text if the password does not match the password confirmation\n    passwordsMustMatchErrorText?: string;\n\n    // error text for uploading too many files to avatar field\n    avatarToManyFilesErrorText?: string;\n\n    // error text for uploading a too large file to avatar\n    avatarToLargeErrorText?: string;\n\n    // error text for uploading a file having the wrong format\n    avatarWrongFormatErrorText?: string;\n\n    // The text shown before the unconfirmed email address, if given\n    unconfirmedEmailText?: string;\n\n    // The text telling the user that the password change field is optional\n    passwordChangeOptionalText?: string;\n\n    // label for the Username field\n    labelUsername?: string;\n\n    // label for the Email field\n    labelEmail?: string;\n\n    // label for the Password field\n    labelPassword?: string;\n\n    // label for the avatar field\n    labelAvatar?: string;\n\n    // label for the PasswordConfirmation field\n    labelPasswordConfirmation?: string;\n\n    // The minimum length of the password\n    minPasswordLength?: number;\n\n    // The minimum length of the username\n    minUsernameLength?: number;\n\n    // The maximum length of the username\n    maxUsernameLength?: number;\n\n    // The maximum length of the email\n    maxEmailLength?: number;\n\n    // Called if the user was successfully updated\n    onUserUpdateSuccess: (user: EzOnRailsUser) => void;\n\n    // Called if the user update failed. The passed error is the exception.\n    onUserUpdateError: (e: unknown) => void;\n\n    // The max size of the avatar\n    avatarMaxSize?: number;\n\n    // css class for the container holding the dropzone for the avatar\n    dropzoneContainerClassName?: string;\n\n    // if set to true, the username field will not be shown and submitted, can be used to only show a set of fields to update\n    hideUsername?: boolean;\n\n    // if set to true, the email field will not be shown and submitted, can be used to only show a set of fields to update\n    hideEmail?: boolean;\n\n    // if set to true, the password and passwordConfirmation field will not be shown and submitted, can be used to only show a set of fields to update\n    hidePassword?: boolean;\n\n    // if set to true, the avatar field will not be shown and submitted, can be used to only show a set of fields to update\n    hideAvatar?: boolean;\n\n    // Ref that is assigned to the submit button, can be used to eg. trigger the submit from outside the form\n    submitRef?: React.Ref<HTMLButtonElement>;\n}\n\n/**\n * UpdateUserForm component for a default form using EzOnRails to update the own user.\n * The auth info needed by the component to receive the users information and update the new information\n * needs to be passed by the props.\n * Customizable with the props using css.\n *\n * @param props\n * @constructor\n */\nexport const UpdateUserForm = (props: UpdateUserFormProps) => {\n    const { authInfo, backendUrl, apiVersion } = useEzOnRails();\n    const [inProgress, setInProgress] = useState<boolean>(false);\n    const [initialFormData, setInitialFormData] = useState<EzOnRailsUpdateUserParams | null>(null);\n    const [unconfirmedEmail, setUnconfirmedEmail] = useState<string | undefined>(undefined);\n\n    /**\n     * Sets the state values to display the form, holding the user data and unconfirmed email, by setting it\n     * to the values of the specified user object.\n     *\n     * @param user\n     */\n    const setFormDataFromUser = (user: EzOnRailsUser) => {\n        setInitialFormData(user);\n        setUnconfirmedEmail(user.unconfirmedEmail);\n    };\n\n    /**\n     * Called once if the form was rendered.\n     * Requests the user data from the server and sets the initial form values to those data.\n     */\n    useEffect(() => {\n        (async () => {\n            if (!authInfo) return;\n\n            setFormDataFromUser(await EzOnRailsHttpClient.getUser(backendUrl, authInfo, apiVersion));\n        })();\n    }, []);\n\n    /**\n     * Updates the user given by the form values.\n     * Calls the callback for a successfull update in the props, if the request was successfull.\n     * In this case the updated data of the user will be passed as parameter.\n     * Calls the callback for some error in the props, if the request was not successfull.\n     * In this case the error thrown by the request will be passed as parameter.\n     *\n     * @param values\n     */\n    const updateUser = async (values: EzOnRailsUpdateUserParams) => {\n        if (!authInfo) return;\n\n        setInProgress(true);\n\n        try {\n            const updatedUser = await EzOnRailsHttpClient.updateUser(backendUrl, values, authInfo, apiVersion);\n            props.onUserUpdateSuccess(updatedUser);\n\n            // reinitialize form to show possibly unconfirmed email\n            setFormDataFromUser(updatedUser);\n\n            setInProgress(false);\n        } catch (e: unknown) {\n            props.onUserUpdateError(e);\n            setInProgress(false);\n        }\n    };\n\n    /**\n     * Validation Schema for registration values.\n     */\n    const UpdateUserValidationSchema: SchemaOf<EzOnRailsUpdateUserParams> = Yup.object()\n        .shape({\n            username: Yup.string()\n                .min(\n                    props.minUsernameLength || 5,\n                    props.usernameToShortErrorText ||\n                        `The username is too short. It must have at least ${props.minUsernameLength || 5} characters.`\n                )\n                .max(\n                    props.maxUsernameLength || 50,\n                    props.usernameToLongErrorText ||\n                        `The username is too long. It must have not more than ${\n                            props.maxUsernameLength || 50\n                        } characters.`\n                )\n                .required(props.usernameRequiredErrorText || 'An username is required.'),\n            email: Yup.string()\n                .email(props.emailInvalidErrorText || 'Invalid email address.')\n                .required(props.emailRequiredErrorText || 'An email address is required.')\n                .max(\n                    props.maxEmailLength || 100,\n                    props.emailToLongErrorText ||\n                        `The email address is too long. It must not have more than ${\n                            props.maxEmailLength || 100\n                        } characters.`\n                ),\n            password: Yup.string().min(\n                props.minPasswordLength || 8,\n                props.passwordToShortErrorText ||\n                    `The password is too short. It must have at least ${props.minPasswordLength || 8} characters.`\n            ),\n            passwordConfirmation: Yup.string().oneOf(\n                [Yup.ref('password')],\n                props.passwordsMustMatchErrorText || 'The password and its confirmation do not match.'\n            )\n        })\n        .defined();\n\n    return (\n        authInfo && (\n            <div className=\"ez-on-rails-form-outer-container\">\n                {initialFormData ? (\n                    <Formik\n                        initialValues={initialFormData}\n                        validationSchema={UpdateUserValidationSchema}\n                        enableReinitialize={true}\n                        onSubmit={(values) => {\n                            updateUser(values);\n                        }}\n                    >\n                        {({ errors, values, handleChange, setFieldValue, setFieldError, handleSubmit }) => (\n                            <form onSubmit={handleSubmit} className={props.containerClassName || formStyles.container}>\n                                {!props.hideUsername && (\n                                    <Form.Group\n                                        id=\"username-container\"\n                                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                                    >\n                                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                                            {props.labelUsername || 'Username'}\n                                        </Form.Label>\n                                        <Form.Control\n                                            id=\"username\"\n                                            className={props.fieldInputClassName || formStyles.formField}\n                                            type=\"text\"\n                                            value={values.username}\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.username}\n                                        />\n                                        <Form.Control.Feedback\n                                            type=\"invalid\"\n                                            className={props.fieldErrorClassName || formStyles.fieldError}\n                                        >\n                                            {errors.username}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                )}\n\n                                {!props.hideEmail && (\n                                    <Form.Group\n                                        id=\"email-container\"\n                                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                                    >\n                                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                                            {props.labelEmail || 'Email address'}\n                                        </Form.Label>\n                                        <Form.Control\n                                            id=\"email\"\n                                            className={props.fieldInputClassName || formStyles.formField}\n                                            type=\"email\"\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.email}\n                                        />\n                                        {unconfirmedEmail && (\n                                            <div\n                                                className={\n                                                    props.fieldInfoClassName || 'ez-on-rails-unconfirmed-email-text'\n                                                }\n                                            >\n                                                {props.unconfirmedEmailText ||\n                                                    'The following email is not yet confirmed: '}{' '}\n                                                {unconfirmedEmail}\n                                            </div>\n                                        )}\n                                        <Form.Control.Feedback\n                                            type=\"invalid\"\n                                            className={props.fieldErrorClassName || formStyles.fieldError}\n                                        >\n                                            {errors.email}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                )}\n\n                                {!props.hidePassword && (\n                                    <Form.Group\n                                        id=\"password-container\"\n                                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                                    >\n                                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                                            {props.labelPassword || 'Password'}\n                                        </Form.Label>\n                                        <Form.Control\n                                            id=\"password\"\n                                            className={props.fieldInputClassName || formStyles.formField}\n                                            type=\"password\"\n                                            value={values.password}\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.password}\n                                        />\n                                        <div\n                                            className={props.fieldInfoClassName || 'ez-on-rails-password-optional-text'}\n                                        >\n                                            {props.passwordChangeOptionalText ||\n                                                'You must only provide this if you want to change the password.'}\n                                        </div>\n                                        <Form.Control.Feedback\n                                            type=\"invalid\"\n                                            className={props.fieldErrorClassName || formStyles.fieldError}\n                                        >\n                                            {errors.password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                )}\n\n                                {!props.hidePassword && (\n                                    <Form.Group\n                                        id=\"password-confirmation-container\"\n                                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                                    >\n                                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                                            {props.labelPasswordConfirmation || 'Password confirmation'}\n                                        </Form.Label>\n                                        <Form.Control\n                                            id=\"passwordConfirmation\"\n                                            className={props.fieldInputClassName || formStyles.formField}\n                                            type=\"password\"\n                                            value={values.passwordConfirmation}\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.passwordConfirmation}\n                                        />\n                                        <Form.Control.Feedback\n                                            type=\"invalid\"\n                                            className={props.fieldErrorClassName || formStyles.fieldError}\n                                        >\n                                            {errors.passwordConfirmation}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                )}\n\n                                {!props.hideAvatar && (\n                                    <Form.Group\n                                        id=\"avatar-container\"\n                                        className={props.fieldContainerClassName || formStyles.fieldContainer}\n                                    >\n                                        <Form.Label className={props.fieldLabelClassName || formStyles.fieldLabel}>\n                                            {props.labelAvatar || 'Avatar'}\n                                        </Form.Label>\n                                        <div className={props.dropzoneContainerClassName || formStyles.formField}>\n                                            <ActiveStorageDropzone\n                                                onChange={(blobs) =>\n                                                    setFieldValue('avatar', blobs.length > 0 ? blobs[0] : null)\n                                                }\n                                                files={values.avatar ? [values.avatar] : []}\n                                                multiple={false}\n                                                maxFiles={1}\n                                                onMaxFilesError={() =>\n                                                    setFieldError(\n                                                        'avatar',\n                                                        props.avatarToManyFilesErrorText || 'Only one file is allowed'\n                                                    )\n                                                }\n                                                maxSize={props.avatarMaxSize || 5242880} // 5 Mb\n                                                onMaxSizeError={() =>\n                                                    setFieldError(\n                                                        'avatar',\n                                                        props.avatarToLargeErrorText ||\n                                                            `The file must not be larger than ${Math.round(\n                                                                (props.avatarMaxSize || 5242880) / 1048576\n                                                            )} MB.`\n                                                    )\n                                                }\n                                                onInvalidTypeError={() =>\n                                                    setFieldError(\n                                                        'avatar',\n                                                        props.avatarWrongFormatErrorText || 'Invalid file format.'\n                                                    )\n                                                }\n                                            />\n                                        </div>\n                                        <Form.Control.Feedback\n                                            type=\"invalid\"\n                                            className={props.fieldErrorClassName || formStyles.fieldError}\n                                        >\n                                            {errors.avatar}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                )}\n                                {!inProgress && (\n                                    <div\n                                        className={\n                                            props.submitButtonContainerClassName || 'ez-on-rails-form-submit-container'\n                                        }\n                                    >\n                                        <Button\n                                            ref={props.submitRef}\n                                            type=\"submit\"\n                                            variant=\"primary\"\n                                            className={props.submitButtonClassName || formStyles.submitButton}\n                                        >\n                                            {props.labelSubmitButton || 'Submit'}\n                                        </Button>\n                                    </div>\n                                )}\n                            </form>\n                        )}\n                    </Formik>\n                ) : (\n                    <div>Loading...</div>\n                )}\n            </div>\n        )\n    );\n};\n", "\nconst digest = '26f9b305c337d82f23e38492352522e21d65c6459993e27ae5faf0621aacf97f';\nconst css = `._container_1c59p_1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n._fieldContainer_1c59p_8 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n}\n\n._fieldLabel_1c59p_15 {\n    font-size: large;\n}\n\n._formField_1c59p_19 {\n\n}\n\n._fieldError_1c59p_23 {\n\n}\n\n._fieldContainer_1c59p_8 .invalid-feedback {\n    font-size: small;\n    color: darkred;\n}\n\n._submitButton_1c59p_32 {\n\n}\n`;\n\n(function() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (!document.getElementById(digest)) {\n    var el = document.createElement('style');\n    el.id = digest;\n    el.textContent = css;\n    document.head.appendChild(el);\n  }\n})();\n    \nexport default {\"container\":\"_container_1c59p_1\",\"fieldContainer\":\"_fieldContainer_1c59p_8\",\"fieldLabel\":\"_fieldLabel_1c59p_15\",\"formField\":\"_formField_1c59p_19\",\"fieldError\":\"_fieldError_1c59p_23\",\"submitButton\":\"_submitButton_1c59p_32\"};\nexport { css, digest };\n  ", "import { EzOnRailsAuthInfo, EzOnRailsHttpClient } from '../client/EzOnRailsHttpClient';\n\n/**\n * SWR Fetcher for EzOnRails api calls.\n * The specified key can either be a string or an array.\n * If the key is a string, a default GET call to the configured EzOnRails api system will be executed.\n * This call includes the user information of the current user for authorization, if it is provided.\n *\n * If key is an array, it expects the following values in the right order.\n * The following parameters are needed:\n * 1. backendUrl - The base url of the EzOnRails application.\n * 2. path - The relative path of the request (without prefixed api/)\n * 3. method: string - The HTTP method\n * 4. data: object - The data passed as body json to the server\n * 5. authInfo: EzOnRailsAuthInfo - Authentication information to identify the user on the server side.\n * 6. apiVersion: string - The api version that must match the one in the backend.\n *\n * If the specified method is DELETE, the data field will be ignored.\n *\n * @param key\n */\nexport const EzOnRailsSwr = {\n    fetcher: async <TParams, TResponse>([\n        backendUrl,\n        path,\n        method = 'get',\n        data = null,\n        authInfo = undefined,\n        apiVersion = '1.0'\n    ]: [\n        backendUrl: string,\n        path: string,\n        method: string,\n        data: TParams | null,\n        authInfo: EzOnRailsAuthInfo | undefined,\n        apiVersion: string\n    ]): Promise<TResponse> => {\n        method = method.toLowerCase();\n        switch (method) {\n            case 'post': {\n                return EzOnRailsHttpClient.post<TParams | null, TResponse>(\n                    backendUrl,\n                    path,\n                    data,\n                    authInfo,\n                    apiVersion\n                );\n            }\n\n            case 'put': {\n                return EzOnRailsHttpClient.put<TParams | null, TResponse>(backendUrl, path, data, authInfo, apiVersion);\n            }\n\n            case 'patch': {\n                return EzOnRailsHttpClient.patch<TParams | null, TResponse>(\n                    backendUrl,\n                    path,\n                    data,\n                    authInfo,\n                    apiVersion\n                );\n            }\n\n            case 'delete': {\n                return EzOnRailsHttpClient.delete<TParams | null, TResponse>(\n                    backendUrl,\n                    path,\n                    data,\n                    authInfo,\n                    apiVersion\n                );\n            }\n\n            default: {\n                return EzOnRailsHttpClient.get<TParams | null, TResponse>(backendUrl, path, data, authInfo, apiVersion);\n            }\n        }\n    }\n};\n", "import {\n    EzOnRailsHttpClient,\n    EzOnRailsAuthInfo,\n    EzOnRailsUser,\n    EzOnRailsUpdateUserParams\n} from './client/EzOnRailsHttpClient';\nimport { EzOnRailsSwr } from './swr/EzOnRailsSwr';\nimport { EzOnRailsHttpUtils } from './utils/EzOnRailsUtils';\n\nexport const EzOnRailsHttp = {\n    client: EzOnRailsHttpClient,\n    swr: EzOnRailsSwr,\n    utils: EzOnRailsHttpUtils\n};\n\nexport { EzOnRailsAuthInfo, EzOnRailsUser, EzOnRailsUpdateUserParams };\n\nexport { EzOnRailsHttpError } from './client/EzOnRailsHttpError';\n", "import { EzOnRailsAuthInfo, EzOnRailsHttpClient } from '../../http/client/EzOnRailsHttpClient';\nimport { AbstractUploader } from '@d4us1/remawy';\nimport * as ActiveStorage from '@rails/activestorage';\nimport { Blob as ActiveStorageBlob } from '@rails/activestorage';\n\n/**\n * Helper class to upload files using the active storage package.\n * This class holds the directUploadWillCreateBlobWithXHR that is used by the active storage direct upload.\n */\nclass ActiveStorageUploaderDelegate {\n    private uploader: EzOnRailsReMaWyUploader;\n    private authInfo: EzOnRailsAuthInfo;\n    private apiVersion: string;\n\n    /**\n     * Constructor takes the uploader that uses the delegate. This is used in directUploadWillCreateBlobWithXHR\n     * to bind the onProgress callback of the uploader to the upload process.\n     * The authInfo are the credentials for the current user.\n     * The apiVersion is the backends api version that must match.\n     *\n     * @param uploader\n     * @param authInfo\n     * @param apiVersion\n     */\n    constructor(uploader: EzOnRailsReMaWyUploader, authInfo: EzOnRailsAuthInfo, apiVersion: string) {\n        this.uploader = uploader;\n        this.authInfo = authInfo;\n        this.apiVersion = apiVersion;\n    }\n\n    /**\n     * Called by the active storage to start the upload.\n     * Appends the authInfo and apiVersion that was given in the constructor.\n     * Binds the onDirectUploadProgress method of the uploader to the progress of the upload.\n     *\n     * @param request\n     */\n    directUploadWillCreateBlobWithXHR(request: XMLHttpRequest) {\n        const httpHeader: { [key: string]: string } = EzOnRailsHttpClient.defaultHttpHeader(\n            this.authInfo,\n            this.apiVersion\n        );\n\n        Object.keys(httpHeader).forEach((key) => {\n            request.setRequestHeader(key, httpHeader[key]);\n        });\n\n        request.upload.addEventListener('progress', (event) => this.uploader.onDirectUploadProgress(event));\n    }\n}\n\n/**\n * Uploader to upload images or other assets to an ez-on-rails backend.\n */\nclass EzOnRailsReMaWyUploader extends AbstractUploader {\n    private baseUrl: string;\n    private authInfo: EzOnRailsAuthInfo;\n    private apiVersion: string;\n\n    /**\n     * Constructor takes the baseUrl (the url that was already used at initializing the ez-on-rails-react component),\n     * the authInfo of the current user and the apiVersion of the backend that is needed to accept the request.\n     *\n     * @param baseUrl\n     * @param authInfo\n     * @param apiVersion\n     */\n    constructor(baseUrl: string, authInfo: EzOnRailsAuthInfo, apiVersion: string) {\n        super();\n\n        if (!baseUrl.endsWith('/')) {\n            baseUrl = `${baseUrl}/`;\n        }\n\n        this.baseUrl = baseUrl;\n        this.authInfo = authInfo;\n        this.apiVersion = apiVersion;\n    }\n\n    /**\n     * Starts to upload the specified file to the backend.\n     *\n     * @param file\n     */\n    public override startUpload(file: File): Promise<void> {\n        const delegate = new ActiveStorageUploaderDelegate(this, this.authInfo, this.apiVersion);\n\n        const upload = new ActiveStorage.DirectUpload(\n            file,\n            `${this.baseUrl}api/active_storage/blobs/create_direct_upload`,\n            delegate\n        );\n\n        upload.create((error: Error, blob: ActiveStorageBlob) => {\n            if (error) {\n                this.onError(error);\n            } else {\n                const url = `${this.baseUrl}rails/active_storage/blobs/${blob.signed_id}/${blob.filename}`;\n                const metadata = {\n                    signedId: blob.signed_id,\n                    fileName: blob.filename\n                };\n\n                this.onFinish(url, file, metadata);\n            }\n        });\n\n        return Promise.resolve(undefined);\n    }\n\n    /**\n     * Called if some direct upload updates its progress.\n     * Calls the onProgress callback of the uploader that should update the view.\n     *\n     * @param event\n     */\n    onDirectUploadProgress(event: ProgressEvent<XMLHttpRequestEventTarget>) {\n        this.onProgress(event.loaded / event.total);\n    }\n}\n\nexport { EzOnRailsReMaWyUploader };\n", "import { EzOnRailsReMaWyUploader } from './EzOnRailsReMaWyUploader';\n\nexport const EzOnRailsReMaWy = {\n    uploader: EzOnRailsReMaWyUploader\n};\n", "import { EzOnRailsReMaWy } from './remawy/EzOnRailsReMaWy';\n\nexport const EzOnRailsIntegrations = {\n    remawy: EzOnRailsReMaWy\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "ActiveStorageDropzone", "DevelopmentHint", "EzOnRails", "EzOnRailsHttp", "EzOnRailsHttpError", "EzOnRailsIntegrations", "LoginForm", "LostPasswordForm", "ProtectedPage", "RegistrationForm", "ResendConfirmationForm", "ResetPasswordForm", "UpdateUserForm", "useEzApi", "useEzApiHttpClient", "useEzOnRails", "useEzScaff", "__toCommonJS", "import_react", "import_react", "EzOnRailsContext", "backendUrl", "authInfo", "apiVersion", "callback", "EzOnRails", "props", "backendUrl", "setBackendUrl", "authInfo", "setAuthInfo", "apiVersion", "setApiVersion", "onUnauthorizedCallback", "setOnUnauthorizedCallback", "setOnUnauthorizedCallbackWrapper", "newCallback", "value", "result", "React", "EzOnRailsContext", "import_react", "Yup", "import_formik", "import_react", "import_react", "import_convert_keys", "cleanupPath", "path", "cleanupUrl", "url", "toBaseUrl", "backendUrl", "toApiUrl", "toSnakeCasePath", "str", "match", "index", "toSnakeCase", "data", "toCamelCase", "toGetParameters", "parameters", "key", "toDates", "params", "param", "toDateStrings", "toBackendParams", "toFrontendParams", "isEzOnRailsHttpError", "err", "EzOnRailsHttpUtils", "EzOnRailsHttpError", "message", "httpStatusCode", "authInfoToHeader", "authInfo", "getAuthInfoFromHeader", "headers", "defaultHttpHeader", "apiVersion", "fetchWithThrow", "method", "url", "body", "response", "EzOnRailsHttpError", "responseHeaders", "responseBody", "value", "key", "EzOnRailsHttpClient", "backendUrl", "data", "EzOnRailsHttpUtils", "result", "avatarSignedId", "submitData", "path", "beforeRequest", "import_react", "useEzOnRails", "EzOnRailsContext", "useEzApiHttpClient", "basePath", "backendUrl", "authInfo", "apiVersion", "onUnauthorizedCallback", "useEzOnRails", "path", "method", "params", "cleanedBasePath", "EzOnRailsHttpUtils", "cleanedPath", "fullPath", "EzOnRailsHttpClient", "err", "useEzApi", "path", "method", "data", "options", "backendUrl", "authInfo", "apiVersion", "useEzOnRails", "response", "setResponse", "error", "setError", "inProgress", "setInProgress", "call", "useEzApiHttpClient", "callApi", "params", "result", "import_react", "useEzScaff", "pluralModelName", "backendUrl", "authInfo", "apiVersion", "useEzOnRails", "record", "setRecord", "records", "setRecords", "inProgress", "setInProgress", "error", "setError", "scaffoldBasePath", "EzOnRailsHttpUtils", "requestHttp", "requestFunc", "result", "err", "getAll", "EzOnRailsHttpClient", "getOne", "id", "search", "query", "create", "properties", "update", "remove", "import_react_bootstrap", "digest", "css", "el", "Form_module_css_default", "RegistrationForm", "props", "backendUrl", "apiVersion", "useEzOnRails", "inProgress", "setInProgress", "register", "values", "EzOnRailsHttpClient", "e", "RegistrationValidationSchema", "React", "errors", "handleChange", "handleSubmit", "Form_module_css_default", "import_formik", "import_Form", "import_Button", "import_react", "Yup", "digest", "css", "el", "Form_module_css_default", "LoginForm", "props", "backendUrl", "apiVersion", "setAuthInfo", "useEzOnRails", "inProgress", "setInProgress", "LoginValidationSchema", "login", "values", "authInfo", "EzOnRailsHttpClient", "e", "React", "errors", "handleChange", "handleSubmit", "Form_module_css_default", "Form", "Button", "import_react", "Yup", "import_formik", "import_Form", "import_Button", "digest", "css", "el", "Form_module_css_default", "LostPasswordForm", "props", "backendUrl", "apiVersion", "useEzOnRails", "inProgress", "setInProgress", "LostPasswordValidationSchema", "passwordReset", "values", "EzOnRailsHttpClient", "e", "React", "errors", "handleChange", "handleSubmit", "Form_module_css_default", "Form", "Button", "import_react", "Yup", "import_formik", "import_Form", "import_Button", "digest", "css", "el", "Form_module_css_default", "ResendConfirmationForm", "props", "backendUrl", "apiVersion", "useEzOnRails", "inProgress", "setInProgress", "ResendConfirmationValidationSchema", "resendConfirmation", "values", "EzOnRailsHttpClient", "e", "React", "errors", "handleChange", "handleSubmit", "Form_module_css_default", "Form", "Button", "import_react", "digest", "css", "el", "DevelopmentHint_module_css_default", "DevelopmentHint", "props", "visible", "setVisible", "dismissTimeout", "React", "DevelopmentHint_module_css_default", "import_react", "ActiveStorage", "import_react_dropzone", "digest", "css", "el", "ActiveStorageDropzone_module_css_default", "blobShowPath", "signedId", "filename", "ActiveStorageDropzone", "props", "backendUrl", "authInfo", "apiVersion", "useEzOnRails", "uploadsInProgress", "setUploadsInProgress", "standardUploadIcon", "React", "removeFileFromServer", "EzOnRailsHttpClient", "removeFile", "event", "newFiles", "file", "onDirectUploadProgress", "onDropAccepted", "acceptedFiles", "maxNewFiles", "sizeFilteredFiles", "acceptedFile", "EzOnRailsHttpUtils", "request", "httpHeader", "key", "error", "blob", "onPaste", "items", "pastedFiles", "item", "type", "previews", "progressSpinners", "i", "onDropzoneRejection", "fileRejections", "fileRejection", "ActiveStorageDropzone_module_css_default", "Dropzone", "getRootProps", "getInputProps", "import_formik", "import_Form", "import_Button", "import_react", "Yup", "digest", "css", "el", "Form_module_css_default", "ResetPasswordForm", "props", "backendUrl", "apiVersion", "useEzOnRails", "inProgress", "setInProgress", "PasswordResetValidationSchema", "resetPassword", "values", "EzOnRailsHttpClient", "e", "React", "errors", "handleChange", "handleSubmit", "Form_module_css_default", "Form", "Button", "import_react", "ProtectedPage", "props", "authInfo", "useEzOnRails", "React", "import_react", "Yup", "import_formik", "import_react_bootstrap", "digest", "css", "el", "Form_module_css_default", "UpdateUserForm", "props", "authInfo", "backendUrl", "apiVersion", "useEzOnRails", "inProgress", "setInProgress", "initialFormData", "setInitialFormData", "unconfirmedEmail", "setUnconfirmedEmail", "setFormDataFromUser", "user", "EzOnRailsHttpClient", "updateUser", "values", "updatedUser", "e", "UpdateUserValidationSchema", "React", "errors", "handleChange", "setFieldValue", "setFieldError", "handleSubmit", "Form_module_css_default", "ActiveStorageDropzone", "blobs", "EzOnRailsSwr", "backendUrl", "path", "method", "data", "authInfo", "apiVersion", "EzOnRailsHttpClient", "EzOnRailsHttp", "EzOnRailsHttpClient", "EzOnRailsSwr", "EzOnRailsHttpUtils", "import_remawy", "ActiveStorage", "ActiveStorageUploaderDelegate", "uploader", "authInfo", "apiVersion", "request", "httpHeader", "EzOnRailsHttpClient", "key", "event", "EzOnRailsReMaWyUploader", "baseUrl", "file", "delegate", "error", "blob", "url", "metadata", "EzOnRailsReMaWy", "EzOnRailsReMaWyUploader", "EzOnRailsIntegrations", "EzOnRailsReMaWy"]
}
